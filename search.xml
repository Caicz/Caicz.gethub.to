<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>妹中机房妖怪图鉴</title>
      <link href="/2222/02/22/mei-zhong-ji-fang-yao-guai-tu-jian/"/>
      <url>/2222/02/22/mei-zhong-ji-fang-yao-guai-tu-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="妖怪图鉴"><a href="#妖怪图鉴" class="headerlink" title="妖怪图鉴"></a>妖怪图鉴</h1><h2 id="妖怪-～独立化的妖力暴走～"><a href="#妖怪-～独立化的妖力暴走～" class="headerlink" title="妖怪 ～独立化的妖力暴走～"></a>妖怪 ～独立化的妖力暴走～</h2><p>妹中的机房里存在着很多妖怪，如果发现自己很久以前打的代码被用谷歌翻译成了中文，或是代码打完发现头文件莫名消失，或许是遭遇了这些机房里的妖怪。</p><p>为了让其他人了解这些妖怪以免受到不必要的伤害的缘故，我们编写了这本妖怪图鉴。</p><h3 id="斯雷姆-threem-显示屏的创世"><a href="#斯雷姆-threem-显示屏的创世" class="headerlink" title="斯雷姆 threem ~显示屏的创世"></a>斯雷姆 threem ~显示屏的创世</h3><p><strong>能力</strong> 操纵显示屏的能力<br><strong>危险度</strong> 低<br><strong>人类友好度</strong> 高<br><strong>主要活动场所</strong> 妹中机房</p><p>机房妖怪中首领的存在，经常被目击到在二号机房使用多台显示器，眼睛能同时聚焦在多个点上。</p><p>外表是酷似石鲁的老爷爷。</p><p>如果在机房中使用电脑时，有被窥视的感觉，而且身后有断断续续的诡异的笑声，那么很有可能遇上了这个妖怪。不过他的危险程度极低，不与他搭话他就会离开。</p><p>古怪的物体特别能吸引他，比如：</p><p><img src="https://s1.ax1x.com/2020/07/25/Ux6hM4.png" alt="Ux6hM4.png"></p><p>评价：</p><ul><li><p>“经常出毒瘤大模拟题呢。” — Z先生(人类)</p></li><li><p>“话说他这么多显示屏是怎么使用的啊。” — C小姐(妖怪)</p></li></ul><h3 id="智障球-zzq-移动的单调栈"><a href="#智障球-zzq-移动的单调栈" class="headerlink" title="智障球 zzq ~移动的单调栈"></a>智障球 zzq ~移动的单调栈</h3><p><strong>能力</strong> 得出正解程度的能力<br><strong>危险度</strong> 几乎没有<br><strong>人类友好度</strong> 高<br><strong>主要活动场所</strong> 妹中机房</p><p>在机房的妖怪中，它似乎好像被排挤了一样，在大多数时间都一个人躲在角落（自己的位置上），但在机房每次的测试结束后，都会异常活跃，原因不明。</p><p>外表为不可名状的三个单调栈。</p><p>爱好似乎是推黄油，被机房里的其他妖怪奉为射击大师，而且自称有看穿衣服的能力。</p><p>如果在机房测试后听到了巨大的响声，或者在路上听到了正解，多半是这个妖怪所为，这时千万不能相信他提供的正解，否则你可能会用SPFA跑背包等奇怪的解法调上一整天，他的目的就达到了。</p><p>不过限于妖怪不通言语的缘故，他的解法常常含糊不清，就没什么人去打了，听到了解法也不必惊慌，赞同一下他就会离开。</p><p>评价：</p><ul><li><p>“又看见他在机房打黄油，话说妖怪也会打手枪吗。” — L先生(人类)</p></li><li><p>“虽说是妖怪但是饭卡很好借的样子。” — M先生(人类)</p></li></ul><h3 id="菜菜子-ccz-非自然的窥视"><a href="#菜菜子-ccz-非自然的窥视" class="headerlink" title="菜菜子 ccz ~非自然的窥视"></a>菜菜子 ccz ~非自然的窥视</h3><p><strong>能力</strong> 机房窥屏程度的能力<br><strong>危险度</strong> 不在机房看奇怪的东西就没有<br><strong>人类友好度</strong> 高<br><strong>主要活动场所</strong> 妹中机房</p><p>窥屏的妖怪，对光源特别敏感，只要是光就可以读出其中蕴含的信息，所以即使在视距之外也可以很清楚地看到屏幕上的东西。</p><p>因为经常窥探到别人隐私的缘故，在机房妖怪中的声誉不怎么好，也经常有其他妖怪担心考试的代码会被看去。</p><p>外表是非常可爱的16岁小女孩，最近正忙于做vtuber出道。</p><p>遭遇的话没什么可以担心的，花点时间陪她玩玩就好了。</p><p>评价：</p><ul><li>“我认识一个菜菜子，数据结构天下第一。” — L先生(毒瘤)</li></ul><h3 id="欧然吉-orange-沉睡的橙子"><a href="#欧然吉-orange-沉睡的橙子" class="headerlink" title="欧然吉 orange ~沉睡的橙子"></a>欧然吉 orange ~沉睡的橙子</h3><p><strong>能力</strong> 随时随地睡觉程度的能力<br><strong>危险度</strong> 你对它可能更危险<br><strong>人类友好度</strong> 非常高<br><strong>主要活动场所</strong> 妹中机房</p><p>最近在机房下面的树林里诞生的妖怪，因为妖力不足经常睡大觉。</p><p>其实十分害怕被人类吃掉，所以很少有人目击到，遭遇到的话它会先跑开。</p><p>外表很诡异,对青少年很不健康：</p><p><img src="https://s1.ax1x.com/2020/07/28/aEayDS.jpg"></p><p>评价：</p><ul><li>“话说有黑奴帮忙运输20斤橘子吗？” — M先生(妖怪)</li></ul>]]></content>
      
      
      <categories>
          
          <category> Touhou </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 妖怪图鉴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性基</title>
      <link href="/2020/08/27/xian-xing-ji/"/>
      <url>/2020/08/27/xian-xing-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>线性基算是上周网课，都讲过的内容了，<del>但网课时上的不认真</del>现在才开始我的线性基学习</p><h3 id="算法内容"><a href="#算法内容" class="headerlink" title="算法内容"></a>算法内容</h3><hr><h4 id="线性基简介"><a href="#线性基简介" class="headerlink" title="线性基简介"></a>线性基简介</h4><p>线性基是一种擅长处理异或问题的<del>数据结构</del>数学工具(虽然有数据结构的许多性质，但参考 $OI-Wiki$ 将其划分到了数论板块)</p><p>线性基是向量空间的一组基，通俗一点将就是有一个集合构造出来的另一个集合，它满足这些性质:</p><ol><li>线性基的元素能相互异或得到原集合元素的所有相互异或得到的值</li><li>线性基是满足<strong>性质1</strong>的最小的集合</li><li>线性基中没有异或和为 0 的子集</li><li>线性基中每个元素的异或方案唯一，也就是说，线性基不同的异或组合异或出的数据是不一样的</li><li>线性基中每个元素的二进制最高位互不相同</li></ol><h4 id="线性基的插入-构造"><a href="#线性基的插入-构造" class="headerlink" title="线性基的插入/构造"></a>线性基的插入/构造</h4><p>如果我们要插入的数为 $x$ ，我们判断 $x$ 的最高位 $i$ 在线性基中是否已经存在。</p><ul><li>如果不存在，我们直接在当前位置上插入 $x$ 并退出</li><li>如果已经存在值为 $p_i$ ，则令 $ x=x\bigoplus p_i$ ,再重复判断直至 $x=0$</li></ul><p>如果退出时 $x=0$ 则说明线性基已经可以表示原先的 $x$ 了；反之，则说明为了表示 $x$ ，我们往线性基中加入了一个新元素</p><p>这样的复杂度是 $\log_2x$ 的，我们也可以用这种方法判断是否能过通过原数列异或得到一个数 $x$ </p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">62</span><span class="token punctuation">;</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token keyword">else</span> x<span class="token operator">^</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    minans<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span>ll x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">62</span><span class="token punctuation">;</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> x<span class="token operator">^</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线性基查询异或最值"><a href="#线性基查询异或最值" class="headerlink" title="线性基查询异或最值"></a>线性基查询异或最值</h4><p>查询最小值相对比较简单。我们考虑插入的过程，因为每一次跳传操作中，$x$ 的二进制最高位一定严格单调递减，所以不可能插入两个二进制最高位相同的数。因此，线性基中最小值异或上其他值一定会增大，所以直接输出线性基中的最小值即可</p><p>考虑异或最大值，从高到低遍历线性基，考虑到第 $i$ 位时，如果当前的答案 $x$ 第 $i$ 位为 $0$ ，就将 $x$ 异或上 $a_i$ ；否则不做任何操作。显然，每次操作后答案不会变劣，最终的 $x$ 即为答案。 </p><p>同样的，我们考虑对于询问某个数 $x$ 与原序列中的数的异或最值如何获得，我们用与序列异或最大值类似的贪心即可解决</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> ll <span class="token function">qmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>minans<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">62</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token keyword">return</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> ll <span class="token function">qmax</span><span class="token punctuation">(</span>ll res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">62</span><span class="token punctuation">;</span>i<span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">--</span>i<span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>res<span class="token operator">^</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>在学线性基之前，一直认为是比较高深的算法，但真的沉下去学之后，才发现似乎并没有想象中的那么高深qwq<br><a href="https://www.luogu.com.cn/problem/P3812" target="_blank" rel="noopener"><strong>模板题</strong></a></p>]]></content>
      
      
      <categories>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【解题报告】[NOI2011]阿狸的打字机</title>
      <link href="/2020/08/26/jie-ti-bao-gao-noi2011-a-li-de-da-zi-ji/"/>
      <url>/2020/08/26/jie-ti-bao-gao-noi2011-a-li-de-da-zi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://www.luogu.com.cn/problem/P2414" target="_blank" rel="noopener">题目链接</a></h3><hr><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>Captain Orange 讲课作业其76，大概思路属于一眼题，但各种各样的毒瘤优化才是本题的关键</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>看到题目第一眼，相信已经有了大概的思路</p><p>建AC自动机，对于每个询问暴力查找  $y$ 串中有多少个位置的 $fail$ 指针指向 $x$ 串的终止节点<br>如果按照这个思路打，可以得到 $30pts$ </p><p>想办法进行优化，发现在询问中，可能会出现一个串作为多个 $y$ 串出现，很容易想到，我们可以用一个将询问离线处理到一个桶中，这样对一个 $y$ 串的处理过程就能够处理多组询问<br>这样就可以得到 $70pts$</p><p>观察性质，我们发现每个结点对其 $fail$ 指针指向的结点贡献为 $1$ ,转化一下思路，我们将 $fail$ 指针反过来连线，发现对于每个 $x$ 其答案为终止点的子树大小和，我们只需要统计子树大小和即可<br>可惜的是，这样仍然只有 $70pts$ </p><p>考虑再进行优化，我们对于每一条串按照 $fail$ 指针倒着连边后并记录当前结点编号，以及从当前结点出发最远可以到达的结点，这样我们就转化成了一个序列问题，每次求一段区间的和。<br>很显然的，我们可以用树状数组优化区间和: 从<strong>原tire树</strong>上遍历，遍历到当前结点即将当前结点的<strong>编号处</strong>的值修改为 $1$ ，遍历结束后再修改为 $0$ 。当遍历到当前串的终止节点时，我们对其作为 $y$ 串的每个询问统计答案即可<br>这样能够得到 $100pts$</p><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>除了以上部分，还有一些需要注意的地方。</p><p>在插入 $tire$ 时，我们不需要每个 $P$ 字符都插入当前串，我们只需要在在遍历输入字符串时，顺便维护一个 $now$ ，并在每个 $P$ 字符标记终止，同时记录一个 $fa$ ，在每个 $B$ 字符处将 $now$ 回退到 $fa[now]$</p><p>在统计答案的遍历时，我们遍历的是<strong>原tire树</strong>，而我们求 $fail$ 指针的过程中会破坏<strong>tire树</strong>的结构，因此我们需要将<strong>原tire树</strong>备份</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;cstring></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;math.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;stdlib.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;time.h></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;queue></span></span><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;algorithm></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ull<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">500005</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> m<span class="token punctuation">,</span>tot<span class="token punctuation">,</span>id<span class="token punctuation">,</span>cnt_edge<span class="token punctuation">,</span>head<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>ed<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> bfn<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>low<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token punctuation">,</span>ott<span class="token punctuation">,</span>ans<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> su<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>taxr<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>taxl<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span> s<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> node<span class="token punctuation">{</span>    <span class="token keyword">int</span> ch<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">,</span>fail<span class="token punctuation">,</span>fa<span class="token punctuation">,</span>id<span class="token punctuation">;</span>    <span class="token keyword">int</span> nch<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>tr<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> edge<span class="token punctuation">{</span>    <span class="token keyword">int</span> v<span class="token punctuation">,</span>last<span class="token punctuation">;</span><span class="token punctuation">}</span>e<span class="token punctuation">[</span>maxn<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> ques<span class="token punctuation">{</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>id<span class="token punctuation">;</span>    <span class="token keyword">friend</span> <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span>ques a<span class="token punctuation">,</span>ques b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">.</span>y<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>qe<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num<span class="token punctuation">,</span>sign<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>sign<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    num<span class="token operator">=</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>num<span class="token operator">=</span><span class="token punctuation">(</span>num<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>num<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sign<span class="token operator">?</span>num<span class="token operator">:</span><span class="token operator">-</span>num<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">get_fail</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span>q<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> u<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                tr<span class="token punctuation">[</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fail<span class="token operator">=</span>tr<span class="token punctuation">[</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>fail<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>                tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>tr<span class="token punctuation">[</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>fail<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">addedge</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> v<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">[</span><span class="token operator">++</span>cnt_edge<span class="token punctuation">]</span><span class="token punctuation">.</span>last<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>e<span class="token punctuation">[</span>cnt_edge<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token operator">=</span>v<span class="token punctuation">,</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>cnt_edge<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    bfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>cnt<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span>head<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token punctuation">;</span>i<span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>last<span class="token punctuation">)</span><span class="token function">dfs</span><span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>    low<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">modify</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> d<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>x<span class="token operator">&lt;=</span>cnt<span class="token punctuation">;</span>x<span class="token operator">+</span><span class="token operator">=</span>x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span>su<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>d<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>x<span class="token punctuation">;</span>x<span class="token operator">-</span><span class="token operator">=</span>x<span class="token operator">&amp;</span><span class="token operator">-</span>x<span class="token punctuation">)</span>res<span class="token operator">+</span><span class="token operator">=</span>su<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">modify</span><span class="token punctuation">(</span>bfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span>taxl<span class="token punctuation">[</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>taxr<span class="token punctuation">[</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            ans<span class="token punctuation">[</span>qe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">sum</span><span class="token punctuation">(</span>low<span class="token punctuation">[</span>ed<span class="token punctuation">[</span>qe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">sum</span><span class="token punctuation">(</span>bfn<span class="token punctuation">[</span>ed<span class="token punctuation">[</span>qe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>nch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">dfs2</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>nch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">modify</span><span class="token punctuation">(</span>bfn<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"P2414_2.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> st<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'P'</span><span class="token operator">||</span>s<span class="token punctuation">[</span>st<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token operator">++</span>st<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> u<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token operator">=</span>st<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'P'</span><span class="token punctuation">)</span>            tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token operator">++</span>id<span class="token punctuation">,</span>ed<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span>u<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'B'</span><span class="token punctuation">)</span>            u<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>fa<span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">++</span>tot<span class="token punctuation">,</span>tr<span class="token punctuation">[</span>tot<span class="token punctuation">]</span><span class="token punctuation">.</span>fa<span class="token operator">=</span>u<span class="token punctuation">;</span>            u<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>tot<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">26</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>            tr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>nch<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>tr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>ch<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">get_fail</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>tot<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">addedge</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>fail<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>qe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>x<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>qe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>qe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>qe<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>qe<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>pos<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i<span class="token operator">=</span>pos<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        taxl<span class="token punctuation">[</span>qe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>qe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token operator">==</span>qe<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token operator">++</span>pos<span class="token punctuation">;</span>        taxr<span class="token punctuation">[</span>qe<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token operator">=</span>pos<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">dfs2</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 解题报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> AC自动机 </tag>
            
            <tag> 字符串 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【解题报告】[国家集训队]middle</title>
      <link href="/2020/08/26/jie-ti-bao-gao-guo-jia-ji-xun-dui-middle/"/>
      <url>/2020/08/26/jie-ti-bao-gao-guo-jia-ji-xun-dui-middle/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://www.luogu.com.cn/problem/P2839" target="_blank" rel="noopener">题目链接</a></h3><hr><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><del>为什么会爆栈啊，那么爆栈是什么呢，小编也不知道爆栈是什么，如果你有关于爆栈的看法，欢迎留言(留言区已关闭</del>，调了一晚上+一早上，虽然过了，仍然有一些小问题，将在后文提出</p><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>给你一个长度为 $n$ 的序列，同时给你 $m$ 个询问，求一个字串 $S$ ，其左端点在 $[a,b]$ ，右端点在 $[c,d]$ 内，求其最大的中位数</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>看到有关中位数的题，我们很清晰的知道可以二分中位数的值，并将大于等于它的赋为 $1$ ，小于它的赋为 $-1$</p><p>同时，我们容易发现，区间$[b+1,c-1]$是必选的区间，所以我们只需要在 $[a,b]$ 选(至少选一个的)最大后缀，和在 $[c,d]$ 选(至少选一个的)最大前缀即可</p><p>感性理解一下，我们要使中位数最大，则应该尽量贪心的选比它大的数，致使其尽量合法</p><p>这样做的复杂度是 $O(nm\log n)$ 的。我们考虑建一棵主席树，主席树的建在原区间上，但是按照原序列的数的权值的从小到大开始建，同样的，一开始我们给每个叶子节点赋初值为 $1$ ，让 $rt[i]$ 表示从排序后第 $i$ 个值的树，其中所有在 $i$ 之前的值的位置上的数都为 $-1$ ，在其之后(包括它自己)都为 $1$ ，这样我们就可以 $O(m\log n)$ 的完成上述操作</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> node <span class="token function">merge</span><span class="token punctuation">(</span>node <span class="token operator">&amp;</span>c<span class="token punctuation">,</span>node a<span class="token punctuation">,</span>node b<span class="token punctuation">)</span><span class="token punctuation">{</span>    c<span class="token punctuation">.</span>sum<span class="token operator">=</span>a<span class="token punctuation">.</span>sum<span class="token operator">+</span>b<span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    c<span class="token punctuation">.</span>lsum<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>lsum<span class="token punctuation">,</span>a<span class="token punctuation">.</span>sum<span class="token operator">+</span>b<span class="token punctuation">.</span>lsum<span class="token punctuation">)</span><span class="token punctuation">;</span>    c<span class="token punctuation">.</span>rsum<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>rsum<span class="token punctuation">,</span>b<span class="token punctuation">.</span>sum<span class="token operator">+</span>a<span class="token punctuation">.</span>rsum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>u<span class="token punctuation">)</span>u<span class="token operator">=</span><span class="token operator">++</span>tot<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>lsum<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>rsum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>ls<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>rs<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>tr<span class="token punctuation">[</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>ls<span class="token punctuation">]</span><span class="token punctuation">,</span>tr<span class="token punctuation">[</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>rs<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token keyword">int</span> pre<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> pos<span class="token punctuation">,</span><span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>u<span class="token punctuation">)</span>u<span class="token operator">=</span><span class="token operator">++</span>tot<span class="token punctuation">;</span>    tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>tr<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>lsum<span class="token operator">=</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>rsum<span class="token operator">=</span>val<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">>=</span>pos<span class="token punctuation">)</span>        <span class="token function">insert</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>ls<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tr<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">.</span>ls<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">insert</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>rs<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tr<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">.</span>rs<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">merge</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">,</span>tr<span class="token punctuation">[</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>ls<span class="token punctuation">]</span><span class="token punctuation">,</span>tr<span class="token punctuation">[</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>rs<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query_sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>r<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>x<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>sum<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">>=</span>x<span class="token punctuation">)</span>res<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query_sum</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>ls<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&lt;</span>y<span class="token punctuation">)</span>res<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query_sum</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>rs<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>node <span class="token function">query__sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>x<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    node res<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">>=</span>x<span class="token operator">&amp;&amp;</span>mid<span class="token operator">>=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">query__sum</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>ls<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&lt;</span>y<span class="token operator">&amp;&amp;</span>mid<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token function">query__sum</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>rs<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span><span class="token function">query__sum</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>ls<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">query__sum</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>rs<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    res<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query_sum</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>x<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query__sum</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">.</span>rsum<span class="token punctuation">;</span>    res<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query__sum</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">.</span>lsum<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token function">insert</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>rt<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lastans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>p<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>lastans<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">,</span>q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>lastans<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">,</span>q<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>lastans<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">,</span>q<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>lastans<span class="token punctuation">)</span><span class="token operator">%</span>n<span class="token punctuation">;</span>        <span class="token function">sort</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>q<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">=</span>n<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">,</span>q<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>l<span class="token operator">=</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>lastans<span class="token operator">=</span>mid<span class="token punctuation">;</span>            <span class="token keyword">else</span> r<span class="token operator">=</span>mid<span class="token number">-1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        lastans<span class="token operator">=</span>a<span class="token punctuation">[</span>lastans<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>lastans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h4><p>在本题中，我们二分的值是原序列排序后的第 $i$ 个值，而不是大小排序为 $i$ 的值，如果你不幸对数列离散化后并<strong>去重</strong>，那么你很有可能只有 $30pts$ (如果<strong>去重后</strong>过了本题，希望能够留言告诉 Caicz</p>]]></content>
      
      
      <categories>
          
          <category> 解题报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 主席树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【解题报告】Beautiful Pair</title>
      <link href="/2020/08/25/jie-ti-bao-gao-beautiful-pair/"/>
      <url>/2020/08/25/jie-ti-bao-gao-beautiful-pair/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://www.luogu.com.cn/problem/P4755" target="_blank" rel="noopener">题目链接</a></h3><hr><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>Captain Orange 讲课的作业题，同时也是第一次长时间没打某种大数据结构后，第一次不看以前的 讲义/笔记/博客 YY出来了，写文祭之</p><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>给你一个长度为 $n$ 的数列，当数列中的一个数对 $(i,j)\quad i&lt;=j$ 满足 $a_ia_j&lt;=max(a_i,a_{i+1},a_{i+1},\cdots,a_j)$ ，则称这个数对是美丽的，求出美丽的数对的个数$\qquad 1\le n\le1e5\quad 1\le a_i\le1e9$</p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>题目中要求的是一段区间，所以我们考虑分治(套路)。观察题目，我们发现对于每一段区间，对于答案有影响的只有最大的数，我们可以用 st表 提前预处理出当前区间最大的数的值和位置，设这个位置为 $mid$ </p><p>得出位置 $mid$ 之后，我们将当前区间分为两部分 $[l,mid]$ 和 $[mid,r]$ ,枚举每一个数对，此时复杂度约为 $O(n^2)$ 。考虑对当前解法进行优化，我们发现只要枚举了其中一个端点之后，我们可以直接计算出另外一个端点的最大值，即为  $\frac{a_{mid}}{a_i}$。</p><p>容易发现，在另外一个区间中，只要值小于 $\frac{a_{mid}}{a_i}$ 都对答案有贡献，而区间kth，我们可以离散化后用主席树轻松维护</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>u<span class="token punctuation">)</span>u<span class="token operator">=</span><span class="token operator">++</span>tot<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>ls<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>rs<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>u<span class="token punctuation">,</span><span class="token keyword">int</span> pre<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>u<span class="token punctuation">)</span>u<span class="token operator">=</span><span class="token operator">++</span>tot<span class="token punctuation">;</span>    tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>tr<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">++</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>si<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">==</span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>mid<span class="token punctuation">)</span>        <span class="token function">insert</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>ls<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tr<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">.</span>ls<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">insert</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span>rs<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>tr<span class="token punctuation">[</span>pre<span class="token punctuation">]</span><span class="token punctuation">.</span>rs<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">int</span> t1<span class="token punctuation">,</span><span class="token keyword">int</span> t2<span class="token punctuation">,</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">&lt;</span>x<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">>=</span>x<span class="token operator">&amp;&amp;</span>r<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span><span class="token keyword">return</span> tr<span class="token punctuation">[</span>t2<span class="token punctuation">]</span><span class="token punctuation">.</span>si<span class="token operator">-</span>tr<span class="token punctuation">[</span>t1<span class="token punctuation">]</span><span class="token punctuation">.</span>si<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid<span class="token operator">=</span><span class="token punctuation">(</span>l<span class="token operator">+</span>r<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">>=</span>x<span class="token punctuation">)</span>res<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>t1<span class="token punctuation">]</span><span class="token punctuation">.</span>ls<span class="token punctuation">,</span>tr<span class="token punctuation">[</span>t2<span class="token punctuation">]</span><span class="token punctuation">.</span>ls<span class="token punctuation">,</span>l<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">&lt;</span>y<span class="token punctuation">)</span>res<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>tr<span class="token punctuation">[</span>t1<span class="token punctuation">]</span><span class="token punctuation">.</span>rs<span class="token punctuation">,</span>tr<span class="token punctuation">[</span>t2<span class="token punctuation">]</span><span class="token punctuation">.</span>rs<span class="token punctuation">,</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>l<span class="token operator">></span>r<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> as<span class="token operator">=</span>lg<span class="token punctuation">[</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    noder t<span class="token operator">=</span><span class="token function">get_max</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>as<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>st<span class="token punctuation">[</span>as<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>as<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>r<span class="token operator">-</span>t<span class="token punctuation">.</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>t<span class="token punctuation">.</span>pos<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>t<span class="token punctuation">.</span>pos<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> val<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">,</span>t<span class="token punctuation">.</span>val<span class="token operator">/</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token operator">!=</span>t<span class="token punctuation">.</span>val<span class="token operator">/</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">--</span>val<span class="token punctuation">;</span>            ans<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>t<span class="token punctuation">.</span>pos<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rt<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">else</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span>t<span class="token punctuation">.</span>pos<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">int</span> val<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">,</span>t<span class="token punctuation">.</span>val<span class="token operator">/</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token operator">!=</span>t<span class="token punctuation">.</span>val<span class="token operator">/</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">--</span>val<span class="token punctuation">;</span>            ans<span class="token operator">+</span><span class="token operator">=</span><span class="token function">query</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>l<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>rt<span class="token punctuation">[</span>t<span class="token punctuation">.</span>pos<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>t<span class="token punctuation">.</span>pos<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>pos<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>st<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>val<span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>st<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pos<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token operator">=</span><span class="token function">unique</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token function">build</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    lg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> t<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token punctuation">;</span>        <span class="token function">insert</span><span class="token punctuation">(</span>rt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>rt<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span>lg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>lg<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>j<span class="token punctuation">)</span><span class="token operator">&lt;=</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">get_max</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>st<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>j<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 解题报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 主席树 </tag>
            
            <tag> RMQ问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【解题报告】[SDOI2015]约数个数和</title>
      <link href="/2020/08/24/jie-ti-bao-gao-sdoi2015-yue-shu-ge-shu-he/"/>
      <url>/2020/08/24/jie-ti-bao-gao-sdoi2015-yue-shu-ge-shu-he/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://www.luogu.com.cn/problem/P3327" target="_blank" rel="noopener">题目链接</a></h3><hr><p>要完成这道题，我们首先需要知道关于约数函数 $d(x)$ 的性质，即<br>$$<br>d(ij)=\sum_{x|i}\sum_{y|j}[\gcd(x,y)==1]<br>$$<br>知道这个性质后，我们就可以愉快的<strong>推式子</strong>了</p><hr><p>$$<br>\begin{align}<br>&amp;{\bf{设}}\qquad<br>f(d)=\sum_{i=1}^n\sum_{j=1}^m[\gcd(x,y)==d],F(n)=\sum_{n|d}f(d)<br>\\<br>&amp;{\bf{反演得}}\qquad f(n)=\sum_{n|d}\mu(\frac{d}{n})\cdot F(d)<br>\\<br>&amp;{\bf{根据 \text{ $d(x)$ }我们得到 }}<br>\\<br>&amp;Ans=\sum_{i=1}^n\sum_{j=1}^m\sum_{x|i}\sum_{y|j}[\gcd(x,y)==1]\\<br>&amp;=\sum_{i=1}^n\sum_{j=1}^m\sum_{x|i}\sum_{y|j}\sum_{d|\gcd(x,y)}\mu(d)\\<br>&amp;{\bf{我们考虑枚举\text{ $d$ },即}}<br>\\<br>&amp;Ans=\sum_{i=1}^n\sum_{j=1}^m\sum_{x|i}\sum_{y|j}\sum_{d}^{\min(n,m)}\mu(d)\cdot [d|\gcd(x,y)]<br>\\<br>&amp;=\sum_{d}^{\min(n,m)}\mu(d)\sum_{i=1}^n\sum_{j=1}^m\sum_{x|i}\sum_{y|j}[d|\gcd(x,y)]<br>\\<br>&amp;=\sum_{d}^{\min(n,m)}\mu(d)\sum_{i=1}^n\sum_{j=1}^m [d|\gcd(x,y)]\lfloor\frac{n}{i}\rfloor\lfloor\frac{m}{j}\rfloor<br>\\<br>&amp;=\sum_{d}^{\min(n,m)}\mu(d)\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum_{j=1}^{[\frac{m}{d}\rfloor}\lfloor\frac{n}{i}\rfloor\lfloor\frac{m}{j}\rfloor<br>\\<br>&amp;=\sum_{d}^{\min(n,m)}\mu(d){\left(\sum_{i=1}^{\lfloor\frac{n}{d}\rfloor}\lfloor\frac{n}{i}\rfloor\right)}{\left(\sum_{j=1}^{\lfloor\frac{m}{d}\rfloor}\lfloor\frac{m}{j}\rfloor\right)}<br>\\<br>\end{align}<br>$$<br>得出最终的式子后，我们预处理一下前缀和，就可以用整除分块解决了<br>$$<br>\large\color{grey}{\text{Talk is cheap, show you the code}}<br>$$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">get_pre</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    mu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            mu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            prim<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>cnt<span class="token operator">&amp;&amp;</span>i<span class="token operator">*</span>prim<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            vis<span class="token punctuation">[</span>prim<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i<span class="token operator">%</span>prim<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>            mu<span class="token punctuation">[</span>prim<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>mu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>mu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ll res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">;</span>l<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>l<span class="token operator">=</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            r<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">/</span><span class="token punctuation">(</span>i<span class="token operator">/</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1ll</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>i<span class="token operator">/</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>res<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    T<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">get_pre</span><span class="token punctuation">(</span><span class="token number">50000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>T<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">></span>m<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">;</span>l<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>l<span class="token operator">=</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            r<span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token punctuation">(</span>n<span class="token operator">/</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span>m<span class="token operator">/</span><span class="token punctuation">(</span>m<span class="token operator">/</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ans<span class="token operator">+</span><span class="token operator">=</span><span class="token number">1ll</span><span class="token operator">*</span><span class="token punctuation">(</span>g<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token operator">-</span>g<span class="token punctuation">[</span>l<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span>sum<span class="token punctuation">[</span>n<span class="token operator">/</span>l<span class="token punctuation">]</span><span class="token operator">*</span>sum<span class="token punctuation">[</span>m<span class="token operator">/</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lld\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 解题报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莫比乌斯反演 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷八月月赛Ⅱ总结</title>
      <link href="/2020/08/22/luo-gu-ba-yue-yue-sai-iizong-jie/"/>
      <url>/2020/08/22/luo-gu-ba-yue-yue-sai-iizong-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="A-「EZEC-3」造房子"><a href="#A-「EZEC-3」造房子" class="headerlink" title="A.「EZEC-3」造房子"></a>A.「EZEC-3」造房子</h2><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>给你 $a,b,c$ 三个数，满足 $a,b,c\leq 1e12$ ,求最大的 $x$ 满足 $f(x)=\sum_{i=1}^x&lt;min(a,b)$ ,其中，$c$ 可以分配给 $a$ 和 $b$ </p><h4 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h4><p>直接一个循环搞定，水题直接看代码</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1000000</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>sum<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">;</span>    cin<span class="token operator">>></span>a<span class="token operator">>></span>b<span class="token operator">>></span>c<span class="token punctuation">;</span>    ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">></span>b<span class="token operator">-</span>a<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ans<span class="token operator">=</span>b<span class="token punctuation">;</span>        c<span class="token operator">-</span><span class="token operator">=</span>b<span class="token operator">-</span>a<span class="token punctuation">;</span>        ans<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>c<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> ans<span class="token operator">=</span>a<span class="token operator">+</span>c<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">1000000</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">&lt;</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            cout<span class="token operator">&lt;&lt;</span>i<span class="token number">-1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="B-「EZEC-3」排列"><a href="#B-「EZEC-3」排列" class="headerlink" title="B.「EZEC-3」排列"></a>B.「EZEC-3」排列</h2><h4 id="题目大意-1"><a href="#题目大意-1" class="headerlink" title="题目大意"></a>题目大意</h4><p>给你一个数的集合，你需要选出若干个数排成一列，记为 $x_1,x_{2},\cdots,x_{p}$（ $p$  为数的个数）。</p><p>这一列数合法<strong>当且仅当</strong>满足以下条件：</p><ul><li>$p \ge 2$。</li><li>令 $y_{i} = x_{i + 1} - x_{i}$（特别的，$y_{p}=x_{1}-x_{p}$），如果把 $y_{1}$ 到 $y_{p}$按 $y_1,y_2,\cdots,y_p$ 的顺序排成<strong>一圈</strong>，那么每两个相邻的数互为相反数且绝对值都为 $k$。$k$ 由输入给出。</li></ul><p>求满足要求的 $x$ 数列的和的最大值<br>$$<br>k,n,x_i\le1e6<br>$$</p><h4 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h4><p>题目要求每相邻 $x_i-x_{i-1}=x_i-x_{i+1}$ 相等,即 $x_{i+1}=x_i-1$ ,显然的我们发现选出来的数列要么只含有一种不同的数（$k=0$），要么就只有两种，由于数据范围并不大，我们可以用一个桶来记录值为 $i$ ，的数的个数，从小到大枚举即可</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"> <span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>k<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>x<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cnt<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ll ans<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>k<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>maxn<span class="token number">-5</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span>k<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>maxn<span class="token number">-5</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>cnt<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>cnt<span class="token punctuation">[</span>i<span class="token operator">-</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>i<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"NO"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="C-「SWTR-6」GCDs-amp-LCMs"><a href="#C-「SWTR-6」GCDs-amp-LCMs" class="headerlink" title="C.「SWTR-6」GCDs &amp; LCMs"></a>C.「SWTR-6」GCDs &amp; LCMs</h2><h4 id="题目大意-2"><a href="#题目大意-2" class="headerlink" title="题目大意"></a>题目大意</h4><p>[ 展开](javascript:void 0)</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给你一个长度为$n$ 的序列 $a_1,a_2,\cdots,a_n$。</p><p>你需要从这些数中选出一些数 $b_1,b_2,\cdots,b_k$ 满足：对于所有$ i\ (1\leq i\leq k$)，$b_i$ 要么是序列 $b$ 中的最大值，要么存在一个位置 $j$ 使得 $b_j&gt;b_i$ 且$ b_i+b_j+\gcd(b_i,b_j)=\mathrm{lcm}(b_i,b_j)$。</p><p>求最大的$\sum_{i=1}^kb_i$，k为任意正整数<br>$$<br>1\le n\le3e5，1\le a_i\le1e9<br>$$</p><h4 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h4><p>对于题目给出的式子，我们考虑化简<br>$$<br>\begin{align}<br>&amp;x+y+\gcd(x,y)=\mathrm{lcm}(x,y)\\<br>&amp;t_1\cdot\gcd(x,y)+t_2\cdot\gcd(x,y)+\gcd(x,y)=\frac{xy}{\gcd(x,y)}\\<br>&amp;t_1\cdot\gcd(x,y)^2+t_2\cdot\gcd(x,y)^2+\gcd(x,y)^2=t_1t_2\cdot\gcd(x,y)^2\\<br>&amp;t_1+t_2+1=t_1t_2<br>\end{align}<br>$$<br>化简后，由于 $t_1,t_2$ ,是互质的，根据打表<del>(玄学理解)</del>可以得出满足条件的 $t_1,t_2$只有 $(2,3)$ 一组，我们考虑离散化后从小到大往上推过去，最后取最大值</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    n<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    ll m<span class="token operator">=</span><span class="token function">unique</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ll t<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token punctuation">;</span>        f<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        ll x<span class="token operator">=</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>x<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ll t<span class="token operator">=</span><span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">;</span>            ll pt<span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>pt<span class="token punctuation">]</span><span class="token operator">==</span>t<span class="token punctuation">)</span>f<span class="token punctuation">[</span>pt<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>ans<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 赛后总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>整除-数论分块</title>
      <link href="/2020/08/21/zheng-chu-shu-lun-fen-kuai/"/>
      <url>/2020/08/21/zheng-chu-shu-lun-fen-kuai/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>学习完莫比乌斯反演之后，Caicz 信心满满的打开一道例题，推出例如这样的式子<br>$$<br>\sum_{T=1}^{\min(n,m)}\lfloor\frac{n}{T}\rfloor\cdot\lfloor\frac{m}{T}\rfloor(\sum_{k|T，k\in prime}\mu(\frac{T}{k}))<br>$$<br>之后，对于每组询问都这样做一遍果断T飞，<del>于是果断点开题解</del>，然后发现了多组求解的科技<strong>整除分块</strong></p><h3 id="整除分块"><a href="#整除分块" class="headerlink" title="整除分块"></a>整除分块</h3><p>一般来说，我们会用到整除分块的形式大概长这样:<br>$$<br>\sum_{i=1}^n\lfloor\frac{n}{i}\rfloor<br>$$<br>显然的，我们可以 $O(n)$ 快速计算这个式子。但是，有时候在多组询问下， $O(n)$ 解决每组询问也许并不能解决，于是我们就可以通过整除分块 $O(\sqrt{n})$完成每组询问</p><p>设 $f(x)=\lfloor\frac{n}{x}\rfloor$ ，则对于 $f(x)$ 我们容易发现它的值是连续且逐步递增的；简单来说即是呈块状分布。同时，我们通过打表等玄学方法可以得到每个块的最后一个数的位置即为 $\large{\frac{n}{\lfloor\frac{n}{i}\rfloor}}$ ,得出结论之后，我们就可以简单的 $O(\sqrt{n})$处理了</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token punctuation">;</span>l<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>l<span class="token operator">=</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    r<span class="token operator">=</span>n<span class="token operator">/</span><span class="token punctuation">(</span>n<span class="token operator">/</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>    ans<span class="token operator">+</span><span class="token operator">=</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">/</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>整除分块单独来说并不难，但是有时候我们推出来的式子还会含有其他的函数，此时我们就需要对这些函数求一个前缀和</p><p>当然，在一些难度较高的题目里面，我们甚至难以接受 $O(n)$ 预处理前缀和，这时我们就需要运用<strong>杜教筛</strong></p><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><a href="https://www.cnblogs.com/peng-ym/p/8661118.html" target="_blank" rel="noopener"> https://www.cnblogs.com/peng-ym/p/8661118.html </a></p>]]></content>
      
      
      <categories>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莫比乌斯反演 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>莫比乌斯反演</title>
      <link href="/2020/08/21/mo-bi-wu-si-fan-yan/"/>
      <url>/2020/08/21/mo-bi-wu-si-fan-yan/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>鸽了许久的数论从莫反开始了……</p><h3 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h3><p>我们称莫比乌斯函数为 $\mu(d)$ ，它是一个<strong>积性函数</strong>，也是一个由<strong>容斥系数</strong>构成的函数</p><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>$$<br>\mu(d)=\begin{cases}<br>    1&amp;(d=1)\\<br>    (-1)^k&amp;(d=p_1p_2p_3\cdots p_k)\\<br>    0&amp;otherwise<br>\end{cases}<br>$$</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ol><li>对于任意正整数 $n$ ，满足 $\sum_{d|n}\mu(d)=[n=1]$ ，即只有 $n=1$ 是返回值为 $1$ ，否则为 $0$ </li><li>对于任意正整数 $n$，满足 $\sum_{d|n}\frac{\mu(d)}{d}=\frac{\phi(n)}{n}$</li></ol><h4 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h4><p>我们根据积性函数的性质，可以直接线筛出 $\mu(n)$</p><p>线筛代码:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">get_mu</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    mu<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            prim<span class="token punctuation">[</span><span class="token operator">++</span>cnt<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            mu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>cnt<span class="token operator">&amp;&amp;</span>prim<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            vis<span class="token punctuation">[</span>prim<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>i<span class="token operator">%</span>prim<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> mu<span class="token punctuation">[</span>i<span class="token operator">*</span>prim<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>mu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h3><p><del>好了，我们以及学会了莫比乌斯函数了，试试看，自己推出莫比乌斯反演吧</del></p><h4 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h4><p>$F(n)$ 和 $f(n)$ 是定义在非负整数集合上的两个函数，并且满足条件:<br>$$<br>F(n)=\sum_{d|n}f(d)<br>$$<br>那么存在结论:<br>$$<br>f(n)=\sum_{d|n}\mu(d)\cdot F(\frac{n}{d})<br>$$<br>这个定理就被称作<strong>莫比乌斯反演定理</strong></p><p>当然莫比乌斯反演也存在另外一种形式的结论，即当<br>$$<br>F(n)=\sum_{n|d}f(d)<br>$$<br>存在结论<br>$$<br>f(n)=\sum_{n|d}\mu(\frac{d}{n})\cdot F(d)<br>$$</p><h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p>一般来说，莫比乌斯反演的证明有两种方式，其中一种是通过定义来证明；另外一种则是利用<strong>狄利克雷卷积</strong>。这里只有第一种证明方法<br>$$<br>\begin{align}<br>&amp;\sum_{d|n}\mu(d)F(\frac{n}{d})\\<br>=&amp;\sum_{d|n}\mu(d)\sum_{i|\frac{n}{d}}f(i)\\<br>=&amp;\sum_{i|{n}}f(i)\sum_{d|\frac{n}{i}}\mu(d)\\<br>=&amp;f(n)<br>\end{align}<br>$$<br>至此，莫比乌斯反演的基本内容就结束了，接下来有一些例题</p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p><a href="https://www.luogu.com.cn/problem/solution/P2257" target="_blank" rel="noopener">YY的gcd</a><br><a href="https://www.luogu.com.cn/problem/P3327" target="_blank" rel="noopener">[SDOI2015]约数个数</a><br><a href="https://www.luogu.com.cn/problem/P1829" target="_blank" rel="noopener">[国家集训队]Crash的数字表格</a></p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>如果你要想完成这些例题，你还需要掌握<a href="https://czicz.cn/2020/08/21/zheng-chu-shu-lun-fen-kuai/"><strong>整除分块</strong></a></p><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><a href="https://www.cnblogs.com/peng-ym/p/8647856.html" target="_blank" rel="noopener"> https://www.cnblogs.com/peng-ym/p/8647856.html </a></p>]]></content>
      
      
      <categories>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 莫比乌斯反演 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多项式入门</title>
      <link href="/2020/08/20/duo-xiang-shi-ru-men/"/>
      <url>/2020/08/20/duo-xiang-shi-ru-men/</url>
      
        <content type="html"><![CDATA[<h5 id="先贴个tp-其实是自己不会"><a href="#先贴个tp-其实是自己不会" class="headerlink" title="先贴个tp(其实是自己不会"></a>先贴个tp(其实是自己不会</h5><h3 id="呜噜噜多项式普及"><a href="#呜噜噜多项式普及" class="headerlink" title="呜噜噜多项式普及"></a><a href="https://www.luogu.com.cn/blog/happydef-blog/duo-xiang-shi-quan-jia-tong-xue-xi-bi-ji-ji-chu#" target="_blank" rel="noopener">呜噜噜多项式普及</a></h3><h3 id="呜噜噜多项式提高"><a href="#呜噜噜多项式提高" class="headerlink" title="呜噜噜多项式提高"></a><a href="https://www.luogu.com.cn/blog/happydef-blog/duo-xiang-shi-quan-jia-tong-xue-xi-bi-ji-jin-jie-post#" target="_blank" rel="noopener">呜噜噜多项式提高</a></h3><hr><h2 id="关于多项式"><a href="#关于多项式" class="headerlink" title="关于多项式"></a>关于多项式</h2><p>它一般以这样的形态出现<br>$$<br>    A(x)=a_0+a_1x+a_2x^2+\cdots+a_nx^n<br>$$<br>其中 $x$ 被称作<strong>自变量</strong>(?)，对应的每个 $a_0,a_1,a_2\cdots$称为这个多项式的<strong>系数</strong>，对于这个多项式的<strong>最高次数</strong> $n$，我们称之为这个多项式的 <strong>度degree</strong>。</p><p>对于每个题目而言，我们知道的同时需要操作的一般也就是它的系数和它的度</p><h3 id="多项式加减乘除！"><a href="#多项式加减乘除！" class="headerlink" title="多项式加减乘除！"></a>多项式加减乘除！</h3><p><del>为什么没有除呢？因为我还不会</del>(现在我会啦!。两个多项式的加减即对应项系数的加减，我们可以 $O(n)$ 简单秒掉，但是多项式相乘呢?</p><p>这里我们引入一个新的概念(至少我是从这里才知道的)—— <strong>卷积</strong></p><p>形如$c_i=\sum_{j=0}^{i}{a_j\times b_{i-j}}$ 中的 $c_i$ 我们称之为 $a,b$ 两个数组的卷积</p><p>那么两个多项式相乘，实际上就是求两个多项式的卷积即$c_ix^i=\sum_{j=0}^{i}{a_jx^j\times b_{i-j}x^{i-j}}$，同时原本度都为为 $n$ 的两个多项式相乘后得到的多项式的度也就变成了 $2n$ .</p><h2 id="快速傅里叶变换-FFT"><a href="#快速傅里叶变换-FFT" class="headerlink" title="快速傅里叶变换(FFT)"></a>快速傅里叶变换(FFT)</h2><p>通过定义式，我们知道两个多项式相乘的复杂度是 $O(n^2)$ 级别的，这对于大多数的题目而言都太慢了，所以我们需要更优秀的算法，多项式的快速变换也就应运而生</p><p>对于一个多项式，我们不仅有系数表达(就是以上所用的表达)，还有<strong>点值表达</strong></p><p>就好像 $n+1$ 个点就可以确定一个次数为 $n$ 的函数图像一样，一个度为 $n$ 多项式也可以转化为 $n+1$ 个点值</p><h3 id="如何转换"><a href="#如何转换" class="headerlink" title="如何转换"></a>如何转换</h3><p>首先我们又得引入几个新的概念：</p><h4 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h4><p>我们一般接触的数都属于实数范围，但还有一些不合法，但是依然存在的数，形如$\sqrt {-1}$(在下文中，我们称之为 $i$ )，我们称之为虚数.</p><p>而复数则是既含有实数，有含有虚数的数。一般来说，我们称复数的实数部分为实部，<strong>虚数部分的系数</strong>为虚部</p><p>复数之间的运算也同我们熟知的实数一样</p><h4 id="单位复数根"><a href="#单位复数根" class="headerlink" title="单位复数根"></a>单位复数根</h4><p>我们设度为$n$ 的多项式的单位复数根为$ \omega_n =e^{2\pi i/n}=\cos(2\pi/n)+i\sin(2\pi/n)$</p><p>它有着非常好的性质</p><p>$\omega_n^n=1$</p><p>$\omega_{2n}^{2d}=\omega_n^d$</p><p>$\omega_{2n}^{d+n}=-\omega_{2n}^d$</p><p>$\sum_{k=1}^{n}w_n^k=0$</p><p>证明: $\sum_{k=1}^{n}\omega_n^k=\frac{\omega_n(\omega_n^n-1)}{\omega_n-1}=0$</p><h3 id="离散傅里叶变换-DFT"><a href="#离散傅里叶变换-DFT" class="headerlink" title="离散傅里叶变换(DFT)"></a>离散傅里叶变换(DFT)</h3><p>即将一个多项式转换为用表达单位复数根的形式，即<br>$$<br>y_k=A(\omega_n^k)=\sum_{j=0}^na_j\omega_n^{kj}<br>$$<br>两个多项式转换为点值表达之后，我们就可以$O(n)$对两个式子相乘</p><h3 id="离散傅里叶逆变换-DFT"><a href="#离散傅里叶逆变换-DFT" class="headerlink" title="离散傅里叶逆变换(DFT)"></a>离散傅里叶逆变换(DFT)</h3><p>这里本来有一个通过矩阵解释的绝妙的证明过程，但矩阵在Markdown中实在太难打了，所以很遗憾<br>$$<br>a_k=\sum_{j=0}^ny_j\omega_n^{-kj}<br>$$<br>这样我们就完成了多项式$O(n\log n)$相乘</p><h3 id="具体实现代码"><a href="#具体实现代码" class="headerlink" title="具体实现代码"></a>具体实现代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Dft</span><span class="token punctuation">(</span>comp <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> rev<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>            a<span class="token punctuation">[</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            a<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    comp <span class="token operator">*</span>g<span class="token operator">=</span>a<span class="token punctuation">,</span><span class="token operator">*</span>h<span class="token operator">=</span>a<span class="token operator">+</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">Dft</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>rev<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Dft</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>rev<span class="token punctuation">)</span><span class="token punctuation">;</span>    comp <span class="token function">w</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token operator">*</span>pi<span class="token operator">/</span>len<span class="token punctuation">)</span><span class="token punctuation">,</span>rev<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token operator">*</span>pi<span class="token operator">/</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        comp t<span class="token operator">=</span>w<span class="token operator">*</span>h<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">;</span>        temp<span class="token punctuation">[</span>k<span class="token operator">+</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-</span>t<span class="token punctuation">;</span>        w<span class="token operator">*</span><span class="token operator">=</span>step<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中FFT有一个叫做蝴蝶变换的优化，大致即为将递归到最后一层时的得到的新数组序列预先处理好，就是将原数组排序为递归时得到的数组，再一层一层往上更新即可</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span>comp <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        re<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>re<span class="token punctuation">[</span>i<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>            re<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">|</span><span class="token operator">=</span>len<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>FFTi<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>re<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>re<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Dft</span><span class="token punctuation">(</span>comp <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> rev<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> h<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>h<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>h<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        comp <span class="token function">step</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token operator">*</span>pi<span class="token operator">/</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span>rev<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token operator">*</span>pi<span class="token operator">/</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">+</span><span class="token operator">=</span>h<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            comp <span class="token function">w</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>j<span class="token operator">+</span>h<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">,</span>w<span class="token operator">*</span><span class="token operator">=</span>step<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                comp u<span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                comp t<span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token operator">+</span>h<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>w<span class="token punctuation">;</span>                a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>u<span class="token operator">+</span>t<span class="token punctuation">;</span>                a<span class="token punctuation">[</span>k<span class="token operator">+</span>h<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>u<span class="token operator">-</span>t<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速傅里叶逆变换"><a href="#快速傅里叶逆变换" class="headerlink" title="快速傅里叶逆变换"></a>快速傅里叶逆变换</h2><h3 id="前置芝士：逆元，NTT"><a href="#前置芝士：逆元，NTT" class="headerlink" title="前置芝士：逆元，NTT"></a>前置芝士：逆元，NTT</h3><hr><h4 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h4><p>即满足 $ax\equiv 1\mod p$ 其中 $a,p$ 互质，$x$ 即被称作 $a$ 关于 $p$ 的逆元</p><p>求解逆元: 一般用 $exged$ 或者 费马小定理</p><p>费马小定理求解逆元: </p><p>因为 $a^{p-1}\equiv 1\mod p$</p><p>所以 $a\cdot a^{p-2}\equiv 1 \mod p$</p><p>得出 $a$ 关于 $p$ 的逆元即为 $a^{p-2}$</p><h4 id="快速数论变换-NTT"><a href="#快速数论变换-NTT" class="headerlink" title="快速数论变换(NTT)"></a>快速数论变换(NTT)</h4><p>关于NTT，<del>我们很明显的看出它与FFT之间的关系(通过中文</del>,它可以只在整数域内变换，完成$n\log n$多项式乘，具体实现我们使用原根 $g$ 代替了单位复数根 $\omega$ ，一般来说，NTT常用模数为<code>998244353</code>或者<code>1004535809</code>，且它们的原根都为<code>3</code></p><p>这里的代替即我们让 $g^{(p-1)/n}$ 等价于 $e^{2\pi i/n}$并在运算的时候对模数取模运算即可</p><p>由于是整数运算，所以正常情况下要比复数运算的FFT快不少</p><p>非正常情况:有关字符串匹配的问题上，NTT要比FFT慢许多</p>]]></content>
      
      
      <categories>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论AMD</title>
      <link href="/2020/08/20/lun-amd/"/>
      <url>/2020/08/20/lun-amd/</url>
      
        <content type="html"><![CDATA[<p><strong>哈萨克斯坦军备为什么比不过美国？</strong></p>]]></content>
      
      
      <categories>
          
          <category> 军事演习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AMD </tag>
            
            <tag> Nvidia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【解题报告】AGC026D - Histogram Coloring</title>
      <link href="/2020/07/31/jie-ti-bao-gao-agc026d-histogram-coloring/"/>
      <url>/2020/07/31/jie-ti-bao-gao-agc026d-histogram-coloring/</url>
      
        <content type="html"><![CDATA[<p><a href="https://atcoder.jp/contests/agc026/tasks/agc026_d" target="_blank" rel="noopener">题目链接</a></p><hr><h4 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h4><p>给你一个有 $N$ 列 $1e9$ 行的直方图，对于第 $i$ 列只保留最下面下面的 $h[i]$ 行。现在你有黑白两种不同的颜色来对这张保留后的图涂色，要求满足对于每个 $2\times2$ 的大方格，必须满足每种颜色恰好占这个大方格的一半，求涂抹的方案总数。答案对1e9+7取模。<br>$$<br>1&lt;=N&lt;=100\text{且}0&lt;=h[i]&lt;=1e9<br>$$</p><h4 id="仓鼠zzy题解"><a href="#仓鼠zzy题解" class="headerlink" title="仓鼠zzy题解:"></a>仓鼠zzy题解:</h4><blockquote><p>首先考虑一个完整的矩形如何计数答案<br>假如已经决定了前面的行，要新增一行。首先可以把上面一行全部翻转当成新增一行；特殊地，当上面一行是黑白相间的，可以直接把上面一行复制下来<br>对于原问题考虑笛卡尔树dp，实际上就是每次把最低的一层给消掉。这样也构成了一个树的结构，然后从下往上dp，每次记录是否黑白相间的情况<br>转移需要把所有上面的层合并，讨论一些情况</p></blockquote><h4 id="自己的解释"><a href="#自己的解释" class="headerlink" title="自己的解释:"></a>自己的解释:</h4><p>1.对于一个高为 $H$，宽为 $len$ 的完整矩形。</p><p><strong>首先设 $ans1$ 表示涂抹方式为黑白相间合法的方案数，$ans0$ 为非黑白相间的合法涂抹方案数</strong></p><p>我们考虑分两种情况考虑，<strong>如果第一行不是黑白相间的，那么对于后面行只有唯一的涂抹方式,即:</strong><br>$$<br>ans0=2^{len}-2;<br>$$<br><strong>如果第一行为黑白相间的涂抹方式，那么对于后面每一行都有两种涂抹方式,即</strong><br>$$<br>ans1=2^{H}<br>$$<br>2.回到原问题，对于一个不规则的直方图，<strong>我们考虑将其划分成多个完整的矩形，并将每个完整小矩形离散化为一个点，然后构建出一棵树来转移。离散化代码:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">,</span><span class="token keyword">int</span> r<span class="token punctuation">,</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> minheight<span class="token operator">=</span>inf<span class="token punctuation">,</span>top<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> st<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>    si<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token operator">-</span>l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span>l<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>r<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>minheight<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>minheight<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                top<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                minheight<span class="token operator">=</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                st<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span>                st<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    st<span class="token punctuation">[</span><span class="token operator">++</span>top<span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token operator">=</span>minheight<span class="token punctuation">;</span>    <span class="token keyword">int</span> lastgo<span class="token operator">=</span>l<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>top<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>lastgo<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">++</span>lastgo<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token operator">++</span>tot<span class="token punctuation">;</span>        c<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>tot<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">build</span><span class="token punctuation">(</span>lastgo<span class="token punctuation">,</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>tot<span class="token punctuation">)</span><span class="token punctuation">;</span>        lastgo<span class="token operator">=</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>离散化完成后，我们就可以设 $dp[u][0]$ 为对于当前节点涂抹中为<strong>非黑白相间的合法涂抹方式，</strong>$dp[u][1]$ 为<strong>黑白相间的合法涂抹方式。</strong></p><p>那么我们就可以推出转移方程:<br>$$<br>\begin{cases}<br>W=len_u-\sum_{v\in son_u}lenv\\<br>dp[u][0]=2^W\times\prod_{v\in son_u}(dp[v][0]+dp[v][1])+(2^W-2)\times\prod_{v\in son_u}dp[v][1]\\<br>dp[u][1]= 2^{H_u}\times\prod_{v\in son_u}dp[v<br>][1]<br>\end{cases}<br>$$</p><p><strong>树上递归实现：</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> u<span class="token punctuation">,</span><span class="token keyword">int</span> lasth<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sum<span class="token operator">=</span>si<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> H<span class="token operator">=</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">-</span>lasth<span class="token punctuation">;</span>    f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">int</span> v<span class="token operator">=</span>c<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token operator">+</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>        f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>        sum<span class="token operator">-</span><span class="token operator">=</span>si<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token function">ksm</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token operator">+</span><span class="token punctuation">(</span>p<span class="token number">-2</span><span class="token operator">*</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span>    f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token function">ksm</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>H<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>\text{the end}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 解题报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DP </tag>
            
            <tag> DP优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【解题报告】[ZJOI2011]营救皮卡丘</title>
      <link href="/2020/07/31/jie-ti-bao-gao-zjoi2011-ying-jiu-pi-qia-qiu/"/>
      <url>/2020/07/31/jie-ti-bao-gao-zjoi2011-ying-jiu-pi-qia-qiu/</url>
      
        <content type="html"><![CDATA[<h3 id="题目链接"><a href="#题目链接" class="headerlink" title="题目链接"></a><a href="https://www.luogu.com.cn/problem/P4542" target="_blank" rel="noopener">题目链接</a></h3><hr><p>首先 , 我们可以轻易的从数据范围<code>N&lt;&lt;M</code>看出，这是一道网络流</p><p>在得出算法后，我们开始考虑建模。</p><p>根据题目条件：</p><ol><li><code>在经过K-1号点之前，任何人是不能够经过K号据点的。</code>，同时由于 $N\le150$ 这里很容易想到跑一遍带限制的Floyd，即由 $x\to y$ ，不经过节点编号比 $y$ 大的点，再从所有编号小的点向编号大的点连一条流量为 $1$ , 边权为 $dis(i,j)$ 的边.</li><li>同时，我们最终要到达 $N$ 号点，即每个点均需到达至少一次。所以我们将除了 $0$ 号点以外的点都向汇点连一条流量为 $1$ ，边权为 $0$ 的边</li><li><code>小智一行K人从真新镇出发.</code>这个很好解决，我们直接从源点向 $0$ 号点连一条流量为 $K$,边权为 $0$ 的边</li></ol><p>在粗略建模完成后，我们发现了一个问题: 从源点出去的流量远小于我们需要的最大流，所以我们考虑网络流常用的拆点思路解决。</p><p><strong>我们将每个点拆为入点和出点，将每个点的入点向汇点连边，再将源点向每个点的出点连一条流量为 $1$ 边权为 $0$ 的边，其余点之间的连边即从 $x$ 的出点，向 $y$ 的入点连边即可</strong></p><p>$$<br>\large\color{grey}{\text{Talk is cheap , show you the code}}<br>$$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token comment" spellcheck="true">//核心建模代码</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> u<span class="token punctuation">,</span>v<span class="token punctuation">,</span>w<span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        u<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>w<span class="token operator">=</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">++</span>u<span class="token punctuation">,</span><span class="token operator">++</span>v<span class="token punctuation">;</span>        f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">,</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">&lt;</span>i<span class="token operator">||</span>k<span class="token operator">&lt;</span>j<span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>f<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>j<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">!=</span>inf<span class="token punctuation">)</span><span class="token function">addedge</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token operator">+</span>n<span class="token punctuation">,</span>inf<span class="token punctuation">,</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">addedge</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>lim<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token function">addedge</span><span class="token punctuation">(</span>i<span class="token operator">+</span>n<span class="token punctuation">,</span>t<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">addedge</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 解题报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络流 </tag>
            
            <tag> 费用流 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回滚莫队&amp;不删除莫队</title>
      <link href="/2020/07/07/hui-gun-mo-dui-bu-shan-chu-mo-dui/"/>
      <url>/2020/07/07/hui-gun-mo-dui-bu-shan-chu-mo-dui/</url>
      
        <content type="html"><![CDATA[<h3 id="模板链接"><a href="#模板链接" class="headerlink" title="模板链接"></a><a href="https://www.luogu.com.cn/problem/P5906" target="_blank" rel="noopener">模板链接</a></h3><hr><h4 id="关于回滚莫队"><a href="#关于回滚莫队" class="headerlink" title="关于回滚莫队"></a>关于回滚莫队</h4><p><del>你需要先学会莫队</del>,我们做<strong>静态区间问题</strong>时有时候会遇到这种情况</p><blockquote><p>给你一个序列，你需要维护序列的某个东西，但是对于这个东西，每次加入很好维护，但删除很难维护</p></blockquote><p>那么我们就需要用到回滚莫队了</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><blockquote><ol><li>将序列以左端点的块的下标为第一关键词，右端点的下标为第二关键词排序（注意不要用莫队的奇偶排序优化）</li><li>排序后，对于询问 $[ql,qr]$ 如果 $block[ql]=block[qr] $ 那么我们直接暴力枚举从 $l$ 到 $r$,时间复杂度为$O(\sqrt n)$</li><li>如果 $l$ 移动到了下一个块，我们对 $l,r$ 进行初始化，将 $l$ 转移为 $R[block[l]]+1$ ,将 $r$ 转移为 $R[block[r]]$ </li><li>我们先将 $r$ 右移至 $qr$ 并加入期间每一个数，再将 $l$ 左移至 $ql$ 并加入</li><li>最后再将 $l$ 回滚回初始化时的位置</li><li>显而易见，复杂度为$O(m\sqrt n)$</li></ol></blockquote><h4 id="关于本题"><a href="#关于本题" class="headerlink" title="关于本题"></a>关于本题</h4><p>在本题中，我们需要记录的是两个值相同的点的最远距离，那么这个答案区间总共有三种情况:</p><ol><li>全在右区间</li><li>全在左区间</li><li>横跨中点(初始化时的 $l$ )</li></ol><p>对于 2,3 两种情况，我们只需要对于每个值记录一个最大下标，再每次相减即可；而对于第 1 种情况，我们则单独记录一个右区间最小下标即可</p><h4 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h4><p>对于每次回滚/初始化，我们不用memset清空数组(事实上这样会超时)，而是直接在移动时判断当前点是否为最大/最小下标来进行清空<br>$$<br>\large\color{grey}{\text{Talk is cheap , show you the code}}<br>$$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;touwenjian.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">200005</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> block<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>R<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>ma<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>mi<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> question<span class="token punctuation">{</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>id<span class="token punctuation">;</span><span class="token punctuation">}</span>q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> sign<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>c<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>sign<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    num<span class="token operator">=</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span>        num<span class="token operator">=</span><span class="token punctuation">(</span>num<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>num<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>    num<span class="token operator">*</span><span class="token operator">=</span>sign<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> question <span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token keyword">const</span> question <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> block<span class="token punctuation">[</span>x<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">^</span>block<span class="token punctuation">[</span>y<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">?</span>block<span class="token punctuation">[</span>x<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">&lt;</span>block<span class="token punctuation">[</span>y<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">:</span>x<span class="token punctuation">.</span>r<span class="token operator">&lt;</span>y<span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"text.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token function">unique</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>M<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>block<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token operator">*</span>len<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">read</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>lastblock<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>block<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">==</span>block<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j<span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>j<span class="token operator">>=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j<span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>j<span class="token operator">>=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>                <span class="token keyword">else</span> temp<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j<span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>j<span class="token operator">>=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lastblock<span class="token operator">^</span>block<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">></span>R<span class="token punctuation">[</span>block<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>mi<span class="token punctuation">[</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token operator">--</span>r<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>R<span class="token punctuation">[</span>block<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>mi<span class="token punctuation">[</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token operator">++</span>l<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            r<span class="token operator">=</span>l<span class="token number">-1</span><span class="token punctuation">;</span>            lastblock<span class="token operator">=</span>block<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">++</span>r<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mi<span class="token punctuation">[</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>mi<span class="token punctuation">[</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">,</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">;</span>            <span class="token keyword">else</span> ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">,</span>temp<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>r<span class="token operator">-</span>mi<span class="token punctuation">[</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> _l<span class="token operator">=</span>l<span class="token punctuation">,</span>res<span class="token operator">=</span>temp<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>_l<span class="token operator">></span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token operator">--</span>_l<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>_l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>_l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>_l<span class="token punctuation">;</span>            <span class="token keyword">else</span> res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>_l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span>_l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ans<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span>res<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>_l<span class="token operator">&lt;</span>l<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>_l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>_l<span class="token punctuation">)</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>_l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token operator">++</span>_l<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【解题报告】[TJOI2009]猜数字</title>
      <link href="/2020/04/30/jie-ti-bao-gao-tjoi2009-cai-shu-zi/"/>
      <url>/2020/04/30/jie-ti-bao-gao-tjoi2009-cai-shu-zi/</url>
      
        <content type="html"><![CDATA[<h2 id="TJOI2009-猜数字"><a href="#TJOI2009-猜数字" class="headerlink" title="[TJOI2009]猜数字"></a><a href="https://www.luogu.com.cn/problem/P3868" target="_blank" rel="noopener">[TJOI2009]猜数字</a></h2><p>本题所需算法：</p><blockquote><p>中国剩余定理—-<a href="https://www.luogu.com.cn/problem/P1495" target="_blank" rel="noopener">模板</a><br>龟速乘</p></blockquote><h2 id="以下部分主要为扩展中国剩余定理的推导过程-与本题无关，不想看的可以直接跳过"><a href="#以下部分主要为扩展中国剩余定理的推导过程-与本题无关，不想看的可以直接跳过" class="headerlink" title="以下部分主要为扩展中国剩余定理的推导过程(与本题无关，不想看的可以直接跳过)"></a>以下部分主要为<a href="https://www.luogu.com.cn/problem/P4777" target="_blank" rel="noopener">扩展中国剩余定理</a>的推导过程(与本题无关，不想看的可以直接跳过)</h2><p>首先我们要知道中国剩余定理的使用要求</p><p>即题目要求中可以化为一下方程组<br>$$<br>\begin{cases}<br>x\equiv b_1(mod(a_1)) \\<br>x\equiv b_2(mod(a_2)) \\<br>x\equiv b_3(mod(a_3)) \\<br> \cdots\cdots\cdots  \\<br>x\equiv b_n(mod(a_n))<br>\end{cases}<br>$$</p><p>对于每对方程，我们可以得到<br>$$<br>\begin{cases}<br>    x=b_a + k_a\cdot a_a \\<br>    x=b_b + k_b\cdot a_b<br>\end{cases}<br>$$<br>联立化简一下<br>$$<br>k_a\cdot a_a + k_b\cdot a_b = b_b - b_a<br>$$<br>对于这个式子，我们可以用 $exgcd$ 求出 满足要求的关于 $x$ 特解 $x_0$ ,那么可以得到以下式子<br>$$<br>\begin{cases}<br>    x_0=b_a + k_a\cdot a_a \\<br>    x=b_a + k_i\cdot a_a \\<br>    k_i=n\cdot\frac{a_b}{\gcd(a_a,a_b)} + k_a(n\in Z)<br>\end{cases}<br>$$<br>那么可以得到<br>$$<br>x=n\cdot\frac{a_b\cdot a_a}{\gcd(a_a,a_b)} + k_a\cdot a_a + b_a = n\cdot lcm(a_a,b_a) + x_0(n\in Z)<br>$$<br>最后两个同余式就可以合并为<br>$$<br>x\equiv x_0\mod lcm(a_a,a_b)<br>$$</p><p><strong>回到中国剩余定理</strong>，</p><p>由于模数 $P_i$ 都为质数，我们可以设<br>$n_i$是满足下面两个式子的最小正整数<br>$$<br>\begin{cases}<br>    n_i\equiv b_i \mod a_i\\<br>    \frac{\prod_{j=1}^{k}{a_j}}{a_i}\mid n_i<br>\end{cases}<br>$$<br>那么 $\sum_{i=1}^k{n_i}$ 一定是满足条件一个解。<br>但是这并不是满足条件的最小值，所以我们还要在此基础上对 $\prod_{j=1}^{k}{a_j}$ 取模</p><p>那么怎么计算 $n_i$ 呢？<br>我们可以运用 $exgcd$ 求出满足<br> $n_i\equiv 1(mod(a_i))$ 的 $n_i$  ,那么可以得出<br>$$<br>b_i\cdot n_i\equiv b_i \mod a_i<br>$$<br>所以我们答案为</p><p>$$<br>\begin{cases}<br>    ans=\sum_{i=1}^k{n_i\cdot b_i}\\<br>    n_i\equiv 1\mod a_i<br>\end{cases}<br>$$</p><p>代码实现</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> ll <span class="token function">china</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ll W<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span>z<span class="token punctuation">,</span>w<span class="token punctuation">,</span>ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>W<span class="token operator">*</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        w<span class="token operator">=</span>W<span class="token operator">/</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">exgcd</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>k<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span><span class="token function">slow</span><span class="token punctuation">(</span><span class="token function">slow</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span>k<span class="token punctuation">,</span>W<span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>W<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span>W<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>W<span class="token punctuation">)</span><span class="token operator">%</span>W<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="龟速乘"><a href="#龟速乘" class="headerlink" title="龟速乘"></a>龟速乘</h3><p>将乘法进行二进制拆分，分步取模防止单次乘法溢出,代码类似于快速幂，只需要将其中的乘法换成加法</p><p>代码实现</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> ll <span class="token function">slow</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span>ll b<span class="token punctuation">,</span>ll mod<span class="token punctuation">)</span><span class="token punctuation">{</span>    ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>b<span class="token operator">=</span><span class="token punctuation">(</span>b<span class="token operator">%</span>mod<span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>\\如果 b 为负数，龟速乘可能会炸掉，所以先取模将b改为正整数    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span>ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>        b<span class="token operator">=</span>b<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>        a<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$$<br>\large\color{grey}{\text{Thanks for your reading}}<br>$$</p>]]></content>
      
      
      <categories>
          
          <category> 解题报告 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> 中国剩余定理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数论学习</title>
      <link href="/2020/04/24/shu-lun/"/>
      <url>/2020/04/24/shu-lun/</url>
      
        <content type="html"><![CDATA[<h4 id="2020-04-24"><a href="#2020-04-24" class="headerlink" title="2020-04-24"></a>2020-04-24</h4><p>在这一天，我开始了系统的学习数论</p><blockquote><p><strong>筛素数</strong></p><p>埃氏筛素数，<a href="https://www.luogu.com.cn/problem/P3912" target="_blank" rel="noopener">线筛法</a></p></blockquote><blockquote><p><strong>整除与同余</strong></p><p><a href="https://www.luogu.com.cn/problem/P1516" target="_blank" rel="noopener">exgcd与gcd</a></p></blockquote><blockquote><p><strong>乘法逆元</strong></p><p><a href="https://www.luogu.com.cn/problem/P3811" target="_blank" rel="noopener">线性递推求逆元</a>，扩展欧几里德求逆元，费马小定理求逆元($P$必须为素数)</p></blockquote><p><strong>唯一分解定理:</strong> 每一个正整数可以唯一的表示成素数的乘积，换句话说，对于任意正整数$n$,可以得到<br>$$<br>n=2^{a_1}*3^{a_2}*5^{a_3}*\cdots<br>$$</p><p>定理1:</p><p>$$<br> a*b=gcd(a,b)*lcm(a,b)<br>$$</p><p><strong>欧几里德算法:</strong></p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>裴蜀定理:</strong> 对于任意两个完全为0的正整数a,b存在$xa+yb=gcd(a,b)$<br>代码实现:</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">exgcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        x<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> tmp<span class="token operator">=</span><span class="token function">gcd</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>a<span class="token operator">%</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> t<span class="token operator">=</span>x<span class="token punctuation">;</span>    x<span class="token operator">=</span>y<span class="token punctuation">,</span>y<span class="token operator">=</span>t<span class="token operator">-</span>a<span class="token operator">/</span>b<span class="token operator">*</span>y<span class="token punctuation">;</span>    <span class="token keyword">return</span> tmp<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>乘法逆元：</strong> 存在$x$使$ax\equiv 1\pmod P $成立，那么就称$x$为$a$关于$P$的乘法逆元，</p><p>定理：$a$关于$P$的乘法逆元存在的充要条件是$gcd(a,p)=1$</p><p>如果逆元存在，则在$0$到$P-1$范围内有且仅有一个逆元。</p><p><strong>作用：</strong> 当需要求$\frac{a}{b}mod(P)$时，其中 a 很大，那么我们可以求出 $b$关于$P$的乘法逆元$x$,则有$\frac{a}{b}\equiv(a\cot x)\pmod P$</p><p><strong>费马小定理：</strong> 假如 P 是素数，且$gcd(a,P)=1$那么就有$a^{p-1}\equiv 1\pmod P$</p><p>我们可以推理得到$a\cdot a^{p-2}\equiv 1\pmod P$，那么根据定义,$a^{p-2}$即为$a$的逆元，其中$a^{p-2}$可以通过快速幂来求</p><p><strong>龟速乘</strong></p><p>将乘法进行二进制拆分，分步取模防止单次乘法溢出,代码类似于快速幂，只需要将其中的乘法换成加法</p><p>代码实现</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> ll <span class="token function">slow</span><span class="token punctuation">(</span>ll a<span class="token punctuation">,</span>ll b<span class="token punctuation">,</span>ll mod<span class="token punctuation">)</span><span class="token punctuation">{</span>    ll ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>b<span class="token operator">=</span><span class="token punctuation">(</span>b<span class="token operator">%</span>mod<span class="token operator">+</span>mod<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果 b 为负数，龟速乘可能会炸掉，所以先取模将b改为正整数</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span>ans<span class="token operator">=</span><span class="token punctuation">(</span>ans<span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>        b<span class="token operator">=</span>b<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>        a<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>mod<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="咕咕分界线1"><a href="#咕咕分界线1" class="headerlink" title="咕咕分界线1"></a>咕咕分界线1</h2><h2 id="中间的时间被咕咕吃了-咕咕好心的给了地址"><a href="#中间的时间被咕咕吃了-咕咕好心的给了地址" class="headerlink" title="中间的时间被咕咕吃了,咕咕好心的给了地址"></a>中间的时间被咕咕吃了,咕咕好心的给了<a href="https://czicz.cn/2020/04/30/jie-ti-bao-gao-tjoi2009-cai-shu-zi/">地址</a></h2><h4 id="2020-05-01"><a href="#2020-05-01" class="headerlink" title="2020-05-01"></a>2020-05-01</h4><p>终于，今天到了学习数论的第三天，开始了快乐的$Catalan$数，也就是组合数的学习</p><blockquote><p><strong>组合数</strong></p></blockquote><blockquote><p><a href="https://www.luogu.com.cn/problem/P5732" target="_blank" rel="noopener">杨辉三角</a>，<a href="https://www.luogu.com.cn/problem/P2822" target="_blank" rel="noopener">组合数问题</a></p></blockquote><blockquote><p><a href="https://www.luogu.com.cn/problem/P3807" target="_blank" rel="noopener">卢卡斯定理</a></p></blockquote><p><strong>卢卡斯定理:</strong> 设$P$为质数，$a,b$都为正整数，并且</p><p>$ a=a_kp^k+a_{k-1}p^{k-1}+a_{k-2}p^{k-2}+\cdots+a_1p+a_0 $<br>$ b=b_kp^k+b_{k-1}p^{k-1}+b_{k-2}p^{k-2}+\cdots+b_1p+b_0 $</p><p>其中$1&lt;=a_i,b_i&lt;=p-1,i=0,1,2,3,\cdots,k$，那么就有<br>$$<br>C_b^a\equiv C_{b_k}^{a_k}\times C_{b_{k-1}}^{a_{k-1}}\times C_{b_{k-2}}^{a_{k-2}}\times\cdots C_{b_0}^{a_0}\pmod p<br>$$</p><p>用递归写出来就是</p><pre class="line-numbers language-cpp"><code class="language-cpp">    <span class="token function">Lucas</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token operator">=</span><span class="token function">Lucas</span><span class="token punctuation">(</span>n<span class="token operator">/</span>p<span class="token punctuation">,</span>m<span class="token operator">/</span>p<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">Catalan</span><span class="token punctuation">(</span>n<span class="token operator">%</span>p<span class="token punctuation">,</span>m<span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">%</span>p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>证明过程</strong></p><h2 id="咕咕分界线2"><a href="#咕咕分界线2" class="headerlink" title="咕咕分界线2"></a>咕咕分界线2</h2><p><strong><a href="https://www.luogu.com.cn/problem/P4720" target="_blank" rel="noopener">拓展卢卡斯定理</a></strong> <del>PS: 感觉和卢卡斯定理关系不大</del></p><h2 id="咕咕分界线3"><a href="#咕咕分界线3" class="headerlink" title="咕咕分界线3"></a>咕咕分界线3</h2><h4 id="2020-05-09"><a href="#2020-05-09" class="headerlink" title="2020-05-09"></a>2020-05-09</h4><p>今天开始了欧拉定理的学习</p><p><strong>欧拉定理：</strong> $\phi(n)$表示从$1-n$的正整数中与$n$互质的数的个数</p><p><strong><a href="https://www.luogu.com.cn/problem/P5091" target="_blank" rel="noopener">拓展欧拉定理</a> :</strong><br>$$<br>a^c=<br>    \begin{cases}<br>    a^{c\bmod\phi(m)}(gcd(a,m)==1)\\<br>    a^c(gcd(a,m)\neq1,c&lt;\phi(m))\\<br>    a^{(c\bmod\phi(m))+\phi(m)}(gcd(a,m)\neq1,c\geq\phi(m))<br>    \end{cases}<br>    \pmod m<br>$$</p><h2 id="咕咕分界线4"><a href="#咕咕分界线4" class="headerlink" title="咕咕分界线4"></a>咕咕分界线4</h2><h4 id="2020-07-28"><a href="#2020-07-28" class="headerlink" title="2020-07-28"></a>2020-07-28</h4>]]></content>
      
      
      <categories>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
