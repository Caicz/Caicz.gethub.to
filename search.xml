<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>多项式入门</title>
      <link href="/2020/08/20/duo-xiang-shi-ru-men/"/>
      <url>/2020/08/20/duo-xiang-shi-ru-men/</url>
      
        <content type="html"><![CDATA[<h5 id="先贴个tp-其实是自己不会"><a href="#先贴个tp-其实是自己不会" class="headerlink" title="先贴个tp(其实是自己不会"></a>先贴个tp(其实是自己不会</h5><h3 id="呜噜噜多项式普及"><a href="#呜噜噜多项式普及" class="headerlink" title="呜噜噜多项式普及"></a><a href="https://www.luogu.com.cn/blog/happydef-blog/duo-xiang-shi-quan-jia-tong-xue-xi-bi-ji-ji-chu#">呜噜噜多项式普及</a></h3><h3 id="呜噜噜多项式提高"><a href="#呜噜噜多项式提高" class="headerlink" title="呜噜噜多项式提高"></a><a href="https://www.luogu.com.cn/blog/happydef-blog/duo-xiang-shi-quan-jia-tong-xue-xi-bi-ji-jin-jie-post#">呜噜噜多项式提高</a></h3><hr><h2 id="关于多项式"><a href="#关于多项式" class="headerlink" title="关于多项式"></a>关于多项式</h2><p>它一般以这样的形态出现<br>$$<br>    A(x)=a_0+a_1x+a_2x^2+\cdots+a_nx^n<br>$$<br>其中 $x$ 被称作<strong>自变量</strong>(?)，对应的每个 $a_0,a_1,a_2\cdots$称为这个多项式的<strong>系数</strong>，对于这个多项式的<strong>最高次数</strong> $n$，我们称之为这个多项式的 <strong>度degree</strong>。</p><p>对于每个题目而言，我们知道的同时需要操作的一般也就是它的系数和它的度</p><h3 id="多项式加减乘除！"><a href="#多项式加减乘除！" class="headerlink" title="多项式加减乘除！"></a>多项式加减乘除！</h3><p><del>为什么没有除呢？因为我还不会</del>(现在我会啦!。两个多项式的加减即对应项系数的加减，我们可以 $O(n)$ 简单秒掉，但是多项式相乘呢?</p><p>这里我们引入一个新的概念(至少我是从这里才知道的)—— <strong>卷积</strong></p><p>形如$c_i=\sum_{j=0}^{i}{a_j\times b_{i-j}}$ 中的 $c_i$ 我们称之为 $a,b$ 两个数组的卷积</p><p>那么两个多项式相乘，实际上就是求两个多项式的卷积即$c_ix^i=\sum_{j=0}^{i}{a_jx^j\times b_{i-j}x^{i-j}}$，同时原本度都为为 $n$ 的两个多项式相乘后得到的多项式的度也就变成了 $2n$ .</p><h2 id="快速傅里叶变换-FFT"><a href="#快速傅里叶变换-FFT" class="headerlink" title="快速傅里叶变换(FFT)"></a>快速傅里叶变换(FFT)</h2><p>通过定义式，我们知道两个多项式相乘的复杂度是 $O(n^2)$ 级别的，这对于大多数的题目而言都太慢了，所以我们需要更优秀的算法，多项式的快速变换也就应运而生</p><p>对于一个多项式，我们不仅有系数表达(就是以上所用的表达)，还有<strong>点值表达</strong></p><p>就好像 $n+1$ 个点就可以确定一个次数为 $n$ 的函数图像一样，一个度为 $n$ 多项式也可以转化为 $n+1$ 个点值</p><h3 id="如何转换"><a href="#如何转换" class="headerlink" title="如何转换"></a>如何转换</h3><p>首先我们又得引入几个新的概念：</p><h4 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h4><p>我们一般接触的数都属于实数范围，但还有一些不合法，但是依然存在的数，形如$\sqrt {-1}$(在下文中，我们称之为 $i$ )，我们称之为虚数.</p><p>而复数则是既含有实数，有含有虚数的数。一般来说，我们称复数的实数部分为实部，<strong>虚数部分的系数</strong>为虚部</p><p>复数之间的运算也同我们熟知的实数一样</p><h4 id="单位复数根"><a href="#单位复数根" class="headerlink" title="单位复数根"></a>单位复数根</h4><p>我们设度为$n$ 的多项式的单位复数根为$ \omega_n =e^{2\pi i/n}=\cos(2\pi/n)+i\sin(2\pi/n)$</p><p>它有着非常好的性质</p><p>$\omega_n^n=1$</p><p>$\omega_{2n}^{2d}=\omega_n^d$</p><p>$\omega_{2n}^{d+n}=-\omega_{2n}^d$</p><p>$\sum_{k=1}^{n}w_n^k=0$</p><p>证明: $\sum_{k=1}^{n}\omega_n^k=\frac{\omega_n(\omega_n^n-1)}{\omega_n-1}=0$</p><h3 id="离散傅里叶变换-DFT"><a href="#离散傅里叶变换-DFT" class="headerlink" title="离散傅里叶变换(DFT)"></a>离散傅里叶变换(DFT)</h3><p>即将一个多项式转换为用表达单位复数根的形式，即<br>$$<br>y_k=A(\omega_n^k)=\sum_{j=0}^na_j\omega_n^{kj}<br>$$<br>两个多项式转换为点值表达之后，我们就可以$O(n)$对两个式子相乘</p><h3 id="离散傅里叶逆变换-DFT"><a href="#离散傅里叶逆变换-DFT" class="headerlink" title="离散傅里叶逆变换(DFT)"></a>离散傅里叶逆变换(DFT)</h3><p>这里本来有一个通过矩阵解释的绝妙的证明过程，但矩阵在Markdown中实在太难打了，所以很遗憾<br>$$<br>a_k=\sum_{j=0}^ny_j\omega_n^{-kj}<br>$$<br>这样我们就完成了多项式$O(n\log n)$相乘</p><h3 id="具体实现代码"><a href="#具体实现代码" class="headerlink" title="具体实现代码"></a>具体实现代码</h3><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Dft</span><span class="token punctuation">(</span>comp <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> rev<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>len<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>            a<span class="token punctuation">[</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token operator">+</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            a<span class="token punctuation">[</span>i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    comp <span class="token operator">*</span>g<span class="token operator">=</span>a<span class="token punctuation">,</span><span class="token operator">*</span>h<span class="token operator">=</span>a<span class="token operator">+</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">Dft</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>rev<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">Dft</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>rev<span class="token punctuation">)</span><span class="token punctuation">;</span>    comp <span class="token function">w</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">step</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token operator">*</span>pi<span class="token operator">/</span>len<span class="token punctuation">)</span><span class="token punctuation">,</span>rev<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token operator">*</span>pi<span class="token operator">/</span>len<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        comp t<span class="token operator">=</span>w<span class="token operator">*</span>h<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>t<span class="token punctuation">;</span>        temp<span class="token punctuation">[</span>k<span class="token operator">+</span>len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">-</span>t<span class="token punctuation">;</span>        w<span class="token operator">*</span><span class="token operator">=</span>step<span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中FFT有一个叫做蝴蝶变换的优化，大致即为将递归到最后一层时的得到的新数组序列预先处理好，就是将原数组排序为递归时得到的数组，再一层一层往上更新即可</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">change</span><span class="token punctuation">(</span>comp <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        re<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>re<span class="token punctuation">[</span>i<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>            re<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">|</span><span class="token operator">=</span>len<span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>FFTi<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>re<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span>re<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">Dft</span><span class="token punctuation">(</span>comp <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> len<span class="token punctuation">,</span><span class="token keyword">int</span> rev<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">change</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> h<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>h<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>h<span class="token operator">&lt;&lt;=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        comp <span class="token function">step</span><span class="token punctuation">(</span><span class="token function">cos</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token operator">*</span>pi<span class="token operator">/</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span>rev<span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token operator">*</span>pi<span class="token operator">/</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">+</span><span class="token operator">=</span>h<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            comp <span class="token function">w</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> k<span class="token operator">=</span>j<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>j<span class="token operator">+</span>h<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token operator">++</span>k<span class="token punctuation">,</span>w<span class="token operator">*</span><span class="token operator">=</span>step<span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                comp u<span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>                comp t<span class="token operator">=</span>a<span class="token punctuation">[</span>k<span class="token operator">+</span>h<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span>w<span class="token punctuation">;</span>                a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>u<span class="token operator">+</span>t<span class="token punctuation">;</span>                a<span class="token punctuation">[</span>k<span class="token operator">+</span>h<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>u<span class="token operator">-</span>t<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="快速傅里叶逆变换"><a href="#快速傅里叶逆变换" class="headerlink" title="快速傅里叶逆变换"></a>快速傅里叶逆变换</h2><h3 id="前置芝士：逆元，NTT"><a href="#前置芝士：逆元，NTT" class="headerlink" title="前置芝士：逆元，NTT"></a>前置芝士：逆元，NTT</h3><hr><h4 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h4><p>即满足 $ax\equiv 1\mod p$ 其中 $a,p$ 互质，$x$ 即被称作 $a$ 关于 $p$ 的逆元</p><p>求解逆元: 一般用 $exged$ 或者 费马小定理</p><p>费马小定理求解逆元: </p><p>因为 $a^{p-1}\equiv 1\mod p$</p><p>所以 $a\cdot a^{p-2}\equiv 1 \mod p$</p><p>得出 $a$ 关于 $p$ 的逆元即为 $a^{p-2}$</p><h4 id="快速数论变换-NTT"><a href="#快速数论变换-NTT" class="headerlink" title="快速数论变换(NTT)"></a>快速数论变换(NTT)</h4><p>关于NTT，<del>我们很明显的看出它与FFT之间的关系(通过中文</del>,它可以只在整数域内变换，完成$n\log n$多项式乘，具体实现我们使用原根 $g$ 代替了单位复数根 $\omega$ ，一般来说，NTT常用模数为<code>998244353</code>或者<code>1004535809</code>，且它们的原根都为<code>3</code></p><p>这里的代替即我们让 $g^{(p-1)/n}$ 等价于 $e^{2\pi i/n}$并在运算的时候对模数取模运算即可</p><p>由于是整数运算，所以正常情况下要比复数运算的FFT快不少</p><p>非正常情况:有关字符串匹配的问题上，NTT要比FFT慢许多</p>]]></content>
      
      
      <categories>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多项式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论AMD</title>
      <link href="/2020/08/20/lun-amd/"/>
      <url>/2020/08/20/lun-amd/</url>
      
        <content type="html"><![CDATA[<p><strong>哈萨克斯坦军备为什么比不过美国？</strong></p>]]></content>
      
      
      <categories>
          
          <category> 军事演习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AMD </tag>
            
            <tag> Nvidia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回滚莫队&amp;不删除莫队</title>
      <link href="/2020/07/07/hui-gun-mo-dui-bu-shan-chu-mo-dui/"/>
      <url>/2020/07/07/hui-gun-mo-dui-bu-shan-chu-mo-dui/</url>
      
        <content type="html"><![CDATA[<h3 id="模板链接"><a href="#模板链接" class="headerlink" title="模板链接"></a><a href="https://www.luogu.com.cn/problem/P5906">模板链接</a></h3><hr><h4 id="关于回滚莫队"><a href="#关于回滚莫队" class="headerlink" title="关于回滚莫队"></a>关于回滚莫队</h4><p><del>你需要先学会莫队</del>,我们做<strong>静态区间问题</strong>时有时候会遇到这种情况</p><blockquote><p>给你一个序列，你需要维护序列的某个东西，但是对于这个东西，每次加入很好维护，但删除很难维护</p></blockquote><p>那么我们就需要用到回滚莫队了</p><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><blockquote><ol><li>将序列以左端点的块的下标为第一关键词，右端点的下标为第二关键词排序（注意不要用莫队的奇偶排序优化）</li><li>排序后，对于询问 $[ql,qr]$ 如果 $block[ql]=block[qr] $ 那么我们直接暴力枚举从 $l$ 到 $r$,时间复杂度为$O(\sqrt n)$</li><li>如果 $l$ 移动到了下一个块，我们对 $l,r$ 进行初始化，将 $l$ 转移为 $R[block[l]]+1$ ,将 $r$ 转移为 $R[block[r]]$ </li><li>我们先将 $r$ 右移至 $qr$ 并加入期间每一个数，再将 $l$ 左移至 $ql$ 并加入</li><li>最后再将 $l$ 回滚回初始化时的位置</li><li>显而易见，复杂度为$O(m\sqrt n)$</li></ol></blockquote><h4 id="关于本题"><a href="#关于本题" class="headerlink" title="关于本题"></a>关于本题</h4><p>在本题中，我们需要记录的是两个值相同的点的最远距离，那么这个答案区间总共有三种情况:</p><ol><li>全在右区间</li><li>全在左区间</li><li>横跨中点(初始化时的 $l$ )</li></ol><p>对于 2,3 两种情况，我们只需要对于每个值记录一个最大下标，再每次相减即可；而对于第 1 种情况，我们则单独记录一个右区间最小下标即可</p><h4 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h4><p>对于每次回滚/初始化，我们不用memset清空数组(事实上这样会超时)，而是直接在移动时判断当前点是否为最大/最小下标来进行清空<br>$$<br>\large\color{grey}{\text{Talk is cheap , show you the code}}<br>$$</p><pre class="line-numbers language-cpp"><code class="language-cpp"><span class="token macro property">#<span class="token directive keyword">include</span><span class="token string">&lt;touwenjian.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">long</span> <span class="token keyword">long</span> ll<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> maxn<span class="token operator">=</span><span class="token number">200005</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span> inf<span class="token operator">=</span><span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">,</span>m<span class="token punctuation">,</span>a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> block<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>R<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> ans<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>ma<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">,</span>mi<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">struct</span> question<span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token punctuation">,</span>r<span class="token punctuation">,</span>id<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>q<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>num<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sign<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token string">'0'</span><span class="token operator">||</span>c<span class="token operator">></span><span class="token string">'9'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'-'</span><span class="token punctuation">)</span>sign<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    num<span class="token operator">=</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>c<span class="token operator">=</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>c<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span>        num<span class="token operator">=</span><span class="token punctuation">(</span>num<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>num<span class="token operator">&lt;&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">+</span>c<span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>    num<span class="token operator">*</span><span class="token operator">=</span>sign<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span><span class="token keyword">const</span> question <span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token keyword">const</span> question <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> block<span class="token punctuation">[</span>x<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">^</span>block<span class="token punctuation">[</span>y<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">?</span>block<span class="token punctuation">[</span>x<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">&lt;</span>block<span class="token punctuation">[</span>y<span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">:</span>x<span class="token punctuation">.</span>r<span class="token operator">&lt;</span>y<span class="token punctuation">.</span>r<span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token keyword">signed</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">freopen</span><span class="token punctuation">(</span><span class="token string">"text.in"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span><span class="token constant">stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> M<span class="token operator">=</span><span class="token function">unique</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>M<span class="token punctuation">,</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span>b<span class="token punctuation">;</span>    <span class="token keyword">int</span> len<span class="token operator">=</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>block<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token number">-1</span><span class="token punctuation">)</span><span class="token operator">/</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>R<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token operator">*</span>len<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">read</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">read</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span>m<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>lastblock<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>block<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token operator">==</span>block<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j<span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>j<span class="token operator">>=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j<span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>j<span class="token operator">>=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>j<span class="token punctuation">;</span>                <span class="token keyword">else</span> temp<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> j<span class="token operator">=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">;</span>j<span class="token operator">>=</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">;</span><span class="token operator">--</span>j<span class="token punctuation">)</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            ans<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span>temp<span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lastblock<span class="token operator">^</span>block<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">></span>R<span class="token punctuation">[</span>block<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>mi<span class="token punctuation">[</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token operator">--</span>r<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>l<span class="token operator">&lt;</span>R<span class="token punctuation">[</span>block<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>mi<span class="token punctuation">[</span>a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token operator">++</span>l<span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>            r<span class="token operator">=</span>l<span class="token number">-1</span><span class="token punctuation">;</span>            lastblock<span class="token operator">=</span>block<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>            temp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token operator">&lt;</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>r<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">++</span>r<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>mi<span class="token punctuation">[</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>mi<span class="token punctuation">[</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">,</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">;</span>            <span class="token keyword">else</span> ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>r<span class="token punctuation">,</span>temp<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span>r<span class="token operator">-</span>mi<span class="token punctuation">[</span>a<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> _l<span class="token operator">=</span>l<span class="token punctuation">,</span>res<span class="token operator">=</span>temp<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>_l<span class="token operator">></span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>l<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token operator">--</span>_l<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>_l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>_l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>_l<span class="token punctuation">;</span>            <span class="token keyword">else</span> res<span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>_l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">-</span>_l<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>        ans<span class="token punctuation">[</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>id<span class="token punctuation">]</span><span class="token operator">=</span>res<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>_l<span class="token operator">&lt;</span>l<span class="token punctuation">)</span>        <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>_l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">==</span>_l<span class="token punctuation">)</span>ma<span class="token punctuation">[</span>a<span class="token punctuation">[</span>_l<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token operator">++</span>_l<span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">register</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 莫队 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数论学习</title>
      <link href="/2020/04/24/shu-lun/"/>
      <url>/2020/04/24/shu-lun/</url>
      
        <content type="html"><![CDATA[<h4 id="2020-04-24"><a href="#2020-04-24" class="headerlink" title="2020-04-24"></a>2020-04-24</h4><p>在这一天，我开始了系统的学习数论</p><blockquote><p><strong>筛素数</strong></p><p>埃氏筛素数，<a href="https://www.luogu.com.cn/problem/P3912">线筛法</a></p></blockquote><blockquote><p><strong>整除与同余</strong></p><p><a href="https://www.luogu.com.cn/problem/P1516">exgcd与gcd</a></p></blockquote><blockquote><p><strong>乘法逆元</strong></p><p><a href="https://www.luogu.com.cn/problem/P3811">线性递推求逆元</a>，扩展欧几里德求逆元，费马小定理求逆元($P$必须为素数)</p></blockquote><p><strong>唯一分解定理:</strong> 每一个正整数可以唯一的表示成素数的乘积，换句话说，对于任意正整数$n$,可以得到<br>$$<br>n=2^{a_1}*3^{a_2}*5^{a_3}*\cdots<br>$$</p><p>定理1:</p><p>$$<br> a*b=gcd(a,b)*lcm(a,b)</p><p>$$</p><p><strong>欧几里德算法:</strong></p><pre class="line-numbers language-c++"><code class="language-c++">int gcd(int a,int b)&#123;    if(b==0)return a;    return gcd(b,a%b);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>裴蜀定理:</strong> 对于任意两个完全为0的正整数a,b存在$xa+yb=gcd(a,b)$<br>代码实现:</p><pre class="line-numbers language-c++"><code class="language-c++">int exgcd(int b,int a,int &x,int &y)&#123;    if(b==0)    &#123;        x=1,y=0;        return a;    &#125;    int tmp=gcd(b,a%b);    int t=x;    x=y,y=t-a/b*y;    return tmp&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>乘法逆元：</strong> 存在$x$使$ax\equiv 1\pmod P $成立，那么就称$x$为$a$关于$P$的乘法逆元，</p><p>定理：$a$关于$P$的乘法逆元存在的充要条件是$gcd(a,p)=1$</p><p>如果逆元存在，则在$0$到$P-1$范围内有且仅有一个逆元。</p><p><strong>作用：</strong> 当需要求$\frac{a}{b}mod(P)$时，其中 a 很大，那么我们可以求出 $b$关于$P$的乘法逆元$x$,则有$\frac{a}{b}\equiv(a*x)\pmod P$</p><p><strong>费马小定理：</strong> 假如 P 是素数，且$gcd(a,P)=1$那么就有$a^{p-1}\equiv 1\pmod P$</p><p>我们可以推理得到$a*a^{p-2}\equiv 1\pmod P$，那么根据定义,$a^{p-2}$即为$a$的逆元，其中$a^{p-2}$可以通过快速幂来求</p><p><strong>龟速乘</strong></p><p>将乘法进行二进制拆分，分步取模防止单次乘法溢出,代码类似于快速幂，只需要将其中的乘法换成加法</p><p>代码实现</p><pre class="line-numbers language-c++"><code class="language-c++">inline ll slow(ll a,ll b,ll mod)&#123;    ll ans=0;    if(b<0)b=(b%mod+mod)%mod;\\如果 b 为负数，龟速乘可能会炸掉，所以先取模将b改为正整数    while(b)    &#123;        if(b%2)ans=(ans+a)%mod;        b=b>>1;        a=(a<<1)%mod;    &#125;    return ans;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="咕咕分界线1"><a href="#咕咕分界线1" class="headerlink" title="咕咕分界线1"></a>咕咕分界线1</h2><h2 id="中间的时间被咕咕吃了-咕咕好心的给了地址"><a href="#中间的时间被咕咕吃了-咕咕好心的给了地址" class="headerlink" title="中间的时间被咕咕吃了,咕咕好心的给了地址"></a>中间的时间被咕咕吃了,咕咕好心的给了<a href="https://www.luogu.com.cn/blog/224229/solution-p3868">地址</a></h2><h4 id="2020-05-01"><a href="#2020-05-01" class="headerlink" title="2020-05-01"></a>2020-05-01</h4><p>终于，今天到了学习数论的第三天，开始了快乐的$Catalan$数，也就是组合数的学习</p><blockquote><p><strong>组合数</strong></p></blockquote><blockquote><p><a href="https://www.luogu.com.cn/problem/P5732">杨辉三角</a>，<a href="https://www.luogu.com.cn/problem/P2822">组合数问题</a></p></blockquote><blockquote><p><a href="https://www.luogu.com.cn/problem/P3807">卢卡斯定理</a></p></blockquote><p><strong>卢卡斯定理:</strong> 设$P$为质数，$a,b$都为正整数，并且<br>$$<br>\left{<br>\begin{array}{c}<br>    a=a_kp^k+a_{k-1}p^{k-1}+a_{k-2}p^{k-2}+\cdots+a_1p+a_0\<br>    b=b_kp^k+b_{k-1}p^{k-1}+b_{k-2}p^{k-2}+\cdots+b_1p+b_0<br>\end{array}<br>\right.<br>$$</p><p>其中$1&lt;=a_i,b_i&lt;=p-1,i=0,1,2,3,\cdots,k$，那么就有<br>$$<br>C_b^a\equiv C_{b_k}^{a_k}\times C_{b_{k-1}}^{a_{k-1}}\times C_{b_{k-2}}^{a_{k-2}}\times\cdots C_{b_0}^{a_0}\pmod P<br>$$</p><p>用递归写出来就是</p><pre class="line-numbers language-c++"><code class="language-c++">    Lucas(n,m)%p=Lucas(n/p,m/p)*Catalan(n%p,m%p)%p<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>证明过程</strong></p><h2 id="咕咕分界线2"><a href="#咕咕分界线2" class="headerlink" title="咕咕分界线2"></a>咕咕分界线2</h2><p><strong><a href="https://www.luogu.com.cn/problem/P4720">拓展卢卡斯定理</a></strong> <del>PS: 感觉和卢卡斯定理关系不大</del></p><h2 id="咕咕分界线3"><a href="#咕咕分界线3" class="headerlink" title="咕咕分界线3"></a>咕咕分界线3</h2><h4 id="2020-05-09"><a href="#2020-05-09" class="headerlink" title="2020-05-09"></a>2020-05-09</h4><p>今天开始了欧拉定理的学习</p><p><strong>欧拉定理：</strong> $\phi(n)$表示从$1-n$的正整数中与$n$互质的数的个数</p><p><strong><a href="https://www.luogu.com.cn/problem/P5091">拓展欧拉定理</a> :</strong><br>$$<br>a^c=\left\lbrace<br>    \begin{array}{c}<br>    a^{c\bmod\phi(m)}(gcd(a,m)==1)\<br>    a^c(gcd(a,m)\neq1,c&lt;\phi(m))\<br>    a^{(c\bmod\phi(m))+\phi(m)}(gcd(a,m)\neq1,c\geq\phi(m))<br>    \end{array}<br>    \right.\pmod m<br>$$</p><h2 id="咕咕分界线4"><a href="#咕咕分界线4" class="headerlink" title="咕咕分界线4"></a>咕咕分界线4</h2><h4 id="2020-07-28"><a href="#2020-07-28" class="headerlink" title="2020-07-28"></a>2020-07-28</h4>]]></content>
      
      
      <categories>
          
          <category> 基础学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
